// Package models contains generated code for schema 'public'.
package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// ApplicationStatusEnum is the 'application_status_enum' enum type from schema 'public'.
type ApplicationStatusEnum uint16

// ApplicationStatusEnum values.
const (
	// ApplicationStatusEnumOpen is the 'open' application_status_enum.
	ApplicationStatusEnumOpen ApplicationStatusEnum = 1
	// ApplicationStatusEnumClosed is the 'closed' application_status_enum.
	ApplicationStatusEnumClosed ApplicationStatusEnum = 2
)

// String satisfies the [fmt.Stringer] interface.
func (ase ApplicationStatusEnum) String() string {
	switch ase {
	case ApplicationStatusEnumOpen:
		return "open"
	case ApplicationStatusEnumClosed:
		return "closed"
	}
	return fmt.Sprintf("ApplicationStatusEnum(%d)", ase)
}

// MarshalText marshals [ApplicationStatusEnum] into text.
func (ase ApplicationStatusEnum) MarshalText() ([]byte, error) {
	return []byte(ase.String()), nil
}

// UnmarshalText unmarshals [ApplicationStatusEnum] from text.
func (ase *ApplicationStatusEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "open":
		*ase = ApplicationStatusEnumOpen
	case "closed":
		*ase = ApplicationStatusEnumClosed
	default:
		return ErrInvalidApplicationStatusEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (ase ApplicationStatusEnum) Value() (driver.Value, error) {
	return ase.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (ase *ApplicationStatusEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return ase.UnmarshalText(x)
	case string:
		return ase.UnmarshalText([]byte(x))
	}
	return ErrInvalidApplicationStatusEnum(fmt.Sprintf("%T", v))
}

// NullApplicationStatusEnum represents a null 'application_status_enum' enum for schema 'public'.
type NullApplicationStatusEnum struct {
	ApplicationStatusEnum ApplicationStatusEnum
	// Valid is true if [ApplicationStatusEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nase NullApplicationStatusEnum) Value() (driver.Value, error) {
	if !nase.Valid {
		return nil, nil
	}
	return nase.ApplicationStatusEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nase *NullApplicationStatusEnum) Scan(v any) error {
	if v == nil {
		nase.ApplicationStatusEnum, nase.Valid = 0, false
		return nil
	}
	err := nase.ApplicationStatusEnum.Scan(v)
	nase.Valid = err == nil
	return err
}

// ErrInvalidApplicationStatusEnum is the invalid [ApplicationStatusEnum] error.
type ErrInvalidApplicationStatusEnum string

// Error satisfies the error interface.
func (err ErrInvalidApplicationStatusEnum) Error() string {
	return fmt.Sprintf("invalid ApplicationStatusEnum(%s)", string(err))
}
