package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// ApprovalLog represents a row from 'public.approval_logs'.
type ApprovalLog struct {
	ID        int            `json:"id"`         // id
	RefType   sql.NullString `json:"ref_type"`   // ref_type
	RefID     sql.NullInt64  `json:"ref_id"`     // ref_id
	Result    sql.NullString `json:"result"`     // result
	CreatedAt time.Time      `json:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ApprovalLog] exists in the database.
func (al *ApprovalLog) Exists() bool {
	return al._exists
}

// Deleted returns true when the [ApprovalLog] has been marked for deletion
// from the database.
func (al *ApprovalLog) Deleted() bool {
	return al._deleted
}

// Insert inserts the [ApprovalLog] to the database.
func (al *ApprovalLog) Insert(ctx context.Context, db DB) error {
	switch {
	case al._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case al._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.approval_logs (` +
		`ref_type, ref_id, result, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, al.RefType, al.RefID, al.Result, al.CreatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, al.RefType, al.RefID, al.Result, al.CreatedAt).Scan(&al.ID); err != nil {
		return logerror(err)
	}
	// set exists
	al._exists = true
	return nil
}

// Update updates a [ApprovalLog] in the database.
func (al *ApprovalLog) Update(ctx context.Context, db DB) error {
	switch {
	case !al._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case al._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.approval_logs SET ` +
		`ref_type = $1, ref_id = $2, result = $3, created_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, al.RefType, al.RefID, al.Result, al.CreatedAt, al.ID)
	if _, err := db.ExecContext(ctx, sqlstr, al.RefType, al.RefID, al.Result, al.CreatedAt, al.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ApprovalLog] to the database.
func (al *ApprovalLog) Save(ctx context.Context, db DB) error {
	if al.Exists() {
		return al.Update(ctx, db)
	}
	return al.Insert(ctx, db)
}

// Upsert performs an upsert for [ApprovalLog].
func (al *ApprovalLog) Upsert(ctx context.Context, db DB) error {
	switch {
	case al._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.approval_logs (` +
		`id, ref_type, ref_id, result, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`ref_type = EXCLUDED.ref_type, ref_id = EXCLUDED.ref_id, result = EXCLUDED.result, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, al.ID, al.RefType, al.RefID, al.Result, al.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, al.ID, al.RefType, al.RefID, al.Result, al.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	al._exists = true
	return nil
}

// Delete deletes the [ApprovalLog] from the database.
func (al *ApprovalLog) Delete(ctx context.Context, db DB) error {
	switch {
	case !al._exists: // doesn't exist
		return nil
	case al._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.approval_logs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, al.ID)
	if _, err := db.ExecContext(ctx, sqlstr, al.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	al._deleted = true
	return nil
}

// ApprovalLogByID retrieves a row from 'public.approval_logs' as a [ApprovalLog].
//
// Generated from index 'approval_logs_pkey'.
func ApprovalLogByID(ctx context.Context, db DB, id int) (*ApprovalLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, ref_type, ref_id, result, created_at ` +
		`FROM public.approval_logs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	al := ApprovalLog{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&al.ID, &al.RefType, &al.RefID, &al.Result, &al.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &al, nil
}
