package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// ApprovalStatusEnum is the 'approval_status_enum' enum type from schema 'public'.
type ApprovalStatusEnum uint16

// ApprovalStatusEnum values.
const (
	// ApprovalStatusEnumPending is the 'pending' approval_status_enum.
	ApprovalStatusEnumPending ApprovalStatusEnum = 1
	// ApprovalStatusEnumApproved is the 'approved' approval_status_enum.
	ApprovalStatusEnumApproved ApprovalStatusEnum = 2
	// ApprovalStatusEnumRejected is the 'rejected' approval_status_enum.
	ApprovalStatusEnumRejected ApprovalStatusEnum = 3
)

// String satisfies the [fmt.Stringer] interface.
func (ase ApprovalStatusEnum) String() string {
	switch ase {
	case ApprovalStatusEnumPending:
		return "pending"
	case ApprovalStatusEnumApproved:
		return "approved"
	case ApprovalStatusEnumRejected:
		return "rejected"
	}
	return fmt.Sprintf("ApprovalStatusEnum(%d)", ase)
}

// MarshalText marshals [ApprovalStatusEnum] into text.
func (ase ApprovalStatusEnum) MarshalText() ([]byte, error) {
	return []byte(ase.String()), nil
}

// UnmarshalText unmarshals [ApprovalStatusEnum] from text.
func (ase *ApprovalStatusEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "pending":
		*ase = ApprovalStatusEnumPending
	case "approved":
		*ase = ApprovalStatusEnumApproved
	case "rejected":
		*ase = ApprovalStatusEnumRejected
	default:
		return ErrInvalidApprovalStatusEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (ase ApprovalStatusEnum) Value() (driver.Value, error) {
	return ase.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (ase *ApprovalStatusEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return ase.UnmarshalText(x)
	case string:
		return ase.UnmarshalText([]byte(x))
	}
	return ErrInvalidApprovalStatusEnum(fmt.Sprintf("%T", v))
}

// NullApprovalStatusEnum represents a null 'approval_status_enum' enum for schema 'public'.
type NullApprovalStatusEnum struct {
	ApprovalStatusEnum ApprovalStatusEnum
	// Valid is true if [ApprovalStatusEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nase NullApprovalStatusEnum) Value() (driver.Value, error) {
	if !nase.Valid {
		return nil, nil
	}
	return nase.ApprovalStatusEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nase *NullApprovalStatusEnum) Scan(v any) error {
	if v == nil {
		nase.ApprovalStatusEnum, nase.Valid = 0, false
		return nil
	}
	err := nase.ApprovalStatusEnum.Scan(v)
	nase.Valid = err == nil
	return err
}

// ErrInvalidApprovalStatusEnum is the invalid [ApprovalStatusEnum] error.
type ErrInvalidApprovalStatusEnum string

// Error satisfies the error interface.
func (err ErrInvalidApprovalStatusEnum) Error() string {
	return fmt.Sprintf("invalid ApprovalStatusEnum(%s)", string(err))
}
