package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Attachment represents a row from 'public.attachments'.
type Attachment struct {
	ID         int           `json:"id"`          // id
	FileName   string        `json:"file_name"`   // file_name
	FileType   string        `json:"file_type"`   // file_type
	FileSize   sql.NullInt64 `json:"file_size"`   // file_size
	URL        string        `json:"url"`         // url
	UploadedBy sql.NullInt64 `json:"uploaded_by"` // uploaded_by
	UploadedAt time.Time     `json:"uploaded_at"` // uploaded_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Attachment] exists in the database.
func (a *Attachment) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Attachment] has been marked for deletion
// from the database.
func (a *Attachment) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Attachment] to the database.
func (a *Attachment) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.attachments (` +
		`file_name, file_type, file_size, url, uploaded_by, uploaded_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, a.FileName, a.FileType, a.FileSize, a.URL, a.UploadedBy, a.UploadedAt)
	if err := db.QueryRowContext(ctx, sqlstr, a.FileName, a.FileType, a.FileSize, a.URL, a.UploadedBy, a.UploadedAt).Scan(&a.ID); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Attachment] in the database.
func (a *Attachment) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.attachments SET ` +
		`file_name = $1, file_type = $2, file_size = $3, url = $4, uploaded_by = $5, uploaded_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, a.FileName, a.FileType, a.FileSize, a.URL, a.UploadedBy, a.UploadedAt, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.FileName, a.FileType, a.FileSize, a.URL, a.UploadedBy, a.UploadedAt, a.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Attachment] to the database.
func (a *Attachment) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Attachment].
func (a *Attachment) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.attachments (` +
		`id, file_name, file_type, file_size, url, uploaded_by, uploaded_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`file_name = EXCLUDED.file_name, file_type = EXCLUDED.file_type, file_size = EXCLUDED.file_size, url = EXCLUDED.url, uploaded_by = EXCLUDED.uploaded_by, uploaded_at = EXCLUDED.uploaded_at `
	// run
	logf(sqlstr, a.ID, a.FileName, a.FileType, a.FileSize, a.URL, a.UploadedBy, a.UploadedAt)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID, a.FileName, a.FileType, a.FileSize, a.URL, a.UploadedBy, a.UploadedAt); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Attachment] from the database.
func (a *Attachment) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.attachments ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AttachmentByID retrieves a row from 'public.attachments' as a [Attachment].
//
// Generated from index 'attachments_pkey'.
func AttachmentByID(ctx context.Context, db DB, id int) (*Attachment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, file_name, file_type, file_size, url, uploaded_by, uploaded_at ` +
		`FROM public.attachments ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	a := Attachment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&a.ID, &a.FileName, &a.FileType, &a.FileSize, &a.URL, &a.UploadedBy, &a.UploadedAt); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}
