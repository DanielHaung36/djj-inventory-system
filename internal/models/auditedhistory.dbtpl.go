package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// AuditedHistory represents a row from 'public.audited_history'.
type AuditedHistory struct {
	HistoryID int64            `json:"history_id"` // history_id
	TableName AuditedTableEnum `json:"table_name"` // table_name
	RecordID  int              `json:"record_id"`  // record_id
	StoreID   sql.NullInt64    `json:"store_id"`   // store_id
	ChangedBy int              `json:"changed_by"` // changed_by
	Operation string           `json:"operation"`  // operation
	Payload   []byte           `json:"payload"`    // payload
	ChangedAt time.Time        `json:"changed_at"` // changed_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AuditedHistory] exists in the database.
func (ah *AuditedHistory) Exists() bool {
	return ah._exists
}

// Deleted returns true when the [AuditedHistory] has been marked for deletion
// from the database.
func (ah *AuditedHistory) Deleted() bool {
	return ah._deleted
}

// Insert inserts the [AuditedHistory] to the database.
func (ah *AuditedHistory) Insert(ctx context.Context, db DB) error {
	switch {
	case ah._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ah._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.audited_history (` +
		`table_name, record_id, store_id, changed_by, operation, payload, changed_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING history_id`
	// run
	logf(sqlstr, ah.TableName, ah.RecordID, ah.StoreID, ah.ChangedBy, ah.Operation, ah.Payload, ah.ChangedAt)
	if err := db.QueryRowContext(ctx, sqlstr, ah.TableName, ah.RecordID, ah.StoreID, ah.ChangedBy, ah.Operation, ah.Payload, ah.ChangedAt).Scan(&ah.HistoryID); err != nil {
		return logerror(err)
	}
	// set exists
	ah._exists = true
	return nil
}

// Update updates a [AuditedHistory] in the database.
func (ah *AuditedHistory) Update(ctx context.Context, db DB) error {
	switch {
	case !ah._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ah._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.audited_history SET ` +
		`table_name = $1, record_id = $2, store_id = $3, changed_by = $4, operation = $5, payload = $6, changed_at = $7 ` +
		`WHERE history_id = $8`
	// run
	logf(sqlstr, ah.TableName, ah.RecordID, ah.StoreID, ah.ChangedBy, ah.Operation, ah.Payload, ah.ChangedAt, ah.HistoryID)
	if _, err := db.ExecContext(ctx, sqlstr, ah.TableName, ah.RecordID, ah.StoreID, ah.ChangedBy, ah.Operation, ah.Payload, ah.ChangedAt, ah.HistoryID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AuditedHistory] to the database.
func (ah *AuditedHistory) Save(ctx context.Context, db DB) error {
	if ah.Exists() {
		return ah.Update(ctx, db)
	}
	return ah.Insert(ctx, db)
}

// Upsert performs an upsert for [AuditedHistory].
func (ah *AuditedHistory) Upsert(ctx context.Context, db DB) error {
	switch {
	case ah._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.audited_history (` +
		`history_id, table_name, record_id, store_id, changed_by, operation, payload, changed_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (history_id) DO ` +
		`UPDATE SET ` +
		`table_name = EXCLUDED.table_name, record_id = EXCLUDED.record_id, store_id = EXCLUDED.store_id, changed_by = EXCLUDED.changed_by, operation = EXCLUDED.operation, payload = EXCLUDED.payload, changed_at = EXCLUDED.changed_at `
	// run
	logf(sqlstr, ah.HistoryID, ah.TableName, ah.RecordID, ah.StoreID, ah.ChangedBy, ah.Operation, ah.Payload, ah.ChangedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ah.HistoryID, ah.TableName, ah.RecordID, ah.StoreID, ah.ChangedBy, ah.Operation, ah.Payload, ah.ChangedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ah._exists = true
	return nil
}

// Delete deletes the [AuditedHistory] from the database.
func (ah *AuditedHistory) Delete(ctx context.Context, db DB) error {
	switch {
	case !ah._exists: // doesn't exist
		return nil
	case ah._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.audited_history ` +
		`WHERE history_id = $1`
	// run
	logf(sqlstr, ah.HistoryID)
	if _, err := db.ExecContext(ctx, sqlstr, ah.HistoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	ah._deleted = true
	return nil
}

// AuditedHistoryByHistoryID retrieves a row from 'public.audited_history' as a [AuditedHistory].
//
// Generated from index 'audited_history_pkey'.
func AuditedHistoryByHistoryID(ctx context.Context, db DB, historyID int64) (*AuditedHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`history_id, table_name, record_id, store_id, changed_by, operation, payload, changed_at ` +
		`FROM public.audited_history ` +
		`WHERE history_id = $1`
	// run
	logf(sqlstr, historyID)
	ah := AuditedHistory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, historyID).Scan(&ah.HistoryID, &ah.TableName, &ah.RecordID, &ah.StoreID, &ah.ChangedBy, &ah.Operation, &ah.Payload, &ah.ChangedAt); err != nil {
		return nil, logerror(err)
	}
	return &ah, nil
}

// AuditedHistoryByStoreID retrieves a row from 'public.audited_history' as a [AuditedHistory].
//
// Generated from index 'idx_audhist_store'.
func AuditedHistoryByStoreID(ctx context.Context, db DB, storeID sql.NullInt64) ([]*AuditedHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`history_id, table_name, record_id, store_id, changed_by, operation, payload, changed_at ` +
		`FROM public.audited_history ` +
		`WHERE store_id = $1`
	// run
	logf(sqlstr, storeID)
	rows, err := db.QueryContext(ctx, sqlstr, storeID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AuditedHistory
	for rows.Next() {
		ah := AuditedHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ah.HistoryID, &ah.TableName, &ah.RecordID, &ah.StoreID, &ah.ChangedBy, &ah.Operation, &ah.Payload, &ah.ChangedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ah)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AuditedHistoryByTableName retrieves a row from 'public.audited_history' as a [AuditedHistory].
//
// Generated from index 'idx_audhist_tbl'.
func AuditedHistoryByTableName(ctx context.Context, db DB, tableName AuditedTableEnum) ([]*AuditedHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`history_id, table_name, record_id, store_id, changed_by, operation, payload, changed_at ` +
		`FROM public.audited_history ` +
		`WHERE table_name = $1`
	// run
	logf(sqlstr, tableName)
	rows, err := db.QueryContext(ctx, sqlstr, tableName)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AuditedHistory
	for rows.Next() {
		ah := AuditedHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ah.HistoryID, &ah.TableName, &ah.RecordID, &ah.StoreID, &ah.ChangedBy, &ah.Operation, &ah.Payload, &ah.ChangedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ah)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AuditedHistoryByChangedAt retrieves a row from 'public.audited_history' as a [AuditedHistory].
//
// Generated from index 'idx_audhist_time'.
func AuditedHistoryByChangedAt(ctx context.Context, db DB, changedAt time.Time) ([]*AuditedHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`history_id, table_name, record_id, store_id, changed_by, operation, payload, changed_at ` +
		`FROM public.audited_history ` +
		`WHERE changed_at = $1`
	// run
	logf(sqlstr, changedAt)
	rows, err := db.QueryContext(ctx, sqlstr, changedAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AuditedHistory
	for rows.Next() {
		ah := AuditedHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ah.HistoryID, &ah.TableName, &ah.RecordID, &ah.StoreID, &ah.ChangedBy, &ah.Operation, &ah.Payload, &ah.ChangedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ah)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AuditedHistoryByChangedBy retrieves a row from 'public.audited_history' as a [AuditedHistory].
//
// Generated from index 'idx_audhist_user'.
func AuditedHistoryByChangedBy(ctx context.Context, db DB, changedBy int) ([]*AuditedHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`history_id, table_name, record_id, store_id, changed_by, operation, payload, changed_at ` +
		`FROM public.audited_history ` +
		`WHERE changed_by = $1`
	// run
	logf(sqlstr, changedBy)
	rows, err := db.QueryContext(ctx, sqlstr, changedBy)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AuditedHistory
	for rows.Next() {
		ah := AuditedHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ah.HistoryID, &ah.TableName, &ah.RecordID, &ah.StoreID, &ah.ChangedBy, &ah.Operation, &ah.Payload, &ah.ChangedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ah)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
