package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// AuditedTableEnum is the 'audited_table_enum' enum type from schema 'public'.
type AuditedTableEnum uint16

// AuditedTableEnum values.
const (
	// AuditedTableEnumInventory is the 'inventory' audited_table_enum.
	AuditedTableEnumInventory AuditedTableEnum = 1
	// AuditedTableEnumOrders is the 'orders' audited_table_enum.
	AuditedTableEnumOrders AuditedTableEnum = 2
	// AuditedTableEnumQuoteRequests is the 'quote_requests' audited_table_enum.
	AuditedTableEnumQuoteRequests AuditedTableEnum = 3
	// AuditedTableEnumQuoteLists is the 'quote_lists' audited_table_enum.
	AuditedTableEnumQuoteLists AuditedTableEnum = 4
	// AuditedTableEnumProducts is the 'products' audited_table_enum.
	AuditedTableEnumProducts AuditedTableEnum = 5
	// AuditedTableEnumProductLaunchReviews is the 'product_launch_reviews' audited_table_enum.
	AuditedTableEnumProductLaunchReviews AuditedTableEnum = 6
)

// String satisfies the [fmt.Stringer] interface.
func (ate AuditedTableEnum) String() string {
	switch ate {
	case AuditedTableEnumInventory:
		return "inventory"
	case AuditedTableEnumOrders:
		return "orders"
	case AuditedTableEnumQuoteRequests:
		return "quote_requests"
	case AuditedTableEnumQuoteLists:
		return "quote_lists"
	case AuditedTableEnumProducts:
		return "products"
	case AuditedTableEnumProductLaunchReviews:
		return "product_launch_reviews"
	}
	return fmt.Sprintf("AuditedTableEnum(%d)", ate)
}

// MarshalText marshals [AuditedTableEnum] into text.
func (ate AuditedTableEnum) MarshalText() ([]byte, error) {
	return []byte(ate.String()), nil
}

// UnmarshalText unmarshals [AuditedTableEnum] from text.
func (ate *AuditedTableEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "inventory":
		*ate = AuditedTableEnumInventory
	case "orders":
		*ate = AuditedTableEnumOrders
	case "quote_requests":
		*ate = AuditedTableEnumQuoteRequests
	case "quote_lists":
		*ate = AuditedTableEnumQuoteLists
	case "products":
		*ate = AuditedTableEnumProducts
	case "product_launch_reviews":
		*ate = AuditedTableEnumProductLaunchReviews
	default:
		return ErrInvalidAuditedTableEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (ate AuditedTableEnum) Value() (driver.Value, error) {
	return ate.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (ate *AuditedTableEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return ate.UnmarshalText(x)
	case string:
		return ate.UnmarshalText([]byte(x))
	}
	return ErrInvalidAuditedTableEnum(fmt.Sprintf("%T", v))
}

// NullAuditedTableEnum represents a null 'audited_table_enum' enum for schema 'public'.
type NullAuditedTableEnum struct {
	AuditedTableEnum AuditedTableEnum
	// Valid is true if [AuditedTableEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nate NullAuditedTableEnum) Value() (driver.Value, error) {
	if !nate.Valid {
		return nil, nil
	}
	return nate.AuditedTableEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nate *NullAuditedTableEnum) Scan(v any) error {
	if v == nil {
		nate.AuditedTableEnum, nate.Valid = 0, false
		return nil
	}
	err := nate.AuditedTableEnum.Scan(v)
	nate.Valid = err == nil
	return err
}

// ErrInvalidAuditedTableEnum is the invalid [AuditedTableEnum] error.
type ErrInvalidAuditedTableEnum string

// Error satisfies the error interface.
func (err ErrInvalidAuditedTableEnum) Error() string {
	return fmt.Sprintf("invalid AuditedTableEnum(%s)", string(err))
}
