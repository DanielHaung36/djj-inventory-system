package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// CurrencyCodeEnum is the 'currency_code_enum' enum type from schema 'public'.
type CurrencyCodeEnum uint16

// CurrencyCodeEnum values.
const (
	// CurrencyCodeEnumAud is the 'AUD' currency_code_enum.
	CurrencyCodeEnumAud CurrencyCodeEnum = 1
	// CurrencyCodeEnumUsd is the 'USD' currency_code_enum.
	CurrencyCodeEnumUsd CurrencyCodeEnum = 2
	// CurrencyCodeEnumCny is the 'CNY' currency_code_enum.
	CurrencyCodeEnumCny CurrencyCodeEnum = 3
	// CurrencyCodeEnumEur is the 'EUR' currency_code_enum.
	CurrencyCodeEnumEur CurrencyCodeEnum = 4
	// CurrencyCodeEnumGbp is the 'GBP' currency_code_enum.
	CurrencyCodeEnumGbp CurrencyCodeEnum = 5
)

// String satisfies the [fmt.Stringer] interface.
func (cce CurrencyCodeEnum) String() string {
	switch cce {
	case CurrencyCodeEnumAud:
		return "AUD"
	case CurrencyCodeEnumUsd:
		return "USD"
	case CurrencyCodeEnumCny:
		return "CNY"
	case CurrencyCodeEnumEur:
		return "EUR"
	case CurrencyCodeEnumGbp:
		return "GBP"
	}
	return fmt.Sprintf("CurrencyCodeEnum(%d)", cce)
}

// MarshalText marshals [CurrencyCodeEnum] into text.
func (cce CurrencyCodeEnum) MarshalText() ([]byte, error) {
	return []byte(cce.String()), nil
}

// UnmarshalText unmarshals [CurrencyCodeEnum] from text.
func (cce *CurrencyCodeEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "AUD":
		*cce = CurrencyCodeEnumAud
	case "USD":
		*cce = CurrencyCodeEnumUsd
	case "CNY":
		*cce = CurrencyCodeEnumCny
	case "EUR":
		*cce = CurrencyCodeEnumEur
	case "GBP":
		*cce = CurrencyCodeEnumGbp
	default:
		return ErrInvalidCurrencyCodeEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (cce CurrencyCodeEnum) Value() (driver.Value, error) {
	return cce.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (cce *CurrencyCodeEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return cce.UnmarshalText(x)
	case string:
		return cce.UnmarshalText([]byte(x))
	}
	return ErrInvalidCurrencyCodeEnum(fmt.Sprintf("%T", v))
}

// NullCurrencyCodeEnum represents a null 'currency_code_enum' enum for schema 'public'.
type NullCurrencyCodeEnum struct {
	CurrencyCodeEnum CurrencyCodeEnum
	// Valid is true if [CurrencyCodeEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (ncce NullCurrencyCodeEnum) Value() (driver.Value, error) {
	if !ncce.Valid {
		return nil, nil
	}
	return ncce.CurrencyCodeEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (ncce *NullCurrencyCodeEnum) Scan(v any) error {
	if v == nil {
		ncce.CurrencyCodeEnum, ncce.Valid = 0, false
		return nil
	}
	err := ncce.CurrencyCodeEnum.Scan(v)
	ncce.Valid = err == nil
	return err
}

// ErrInvalidCurrencyCodeEnum is the invalid [CurrencyCodeEnum] error.
type ErrInvalidCurrencyCodeEnum string

// Error satisfies the error interface.
func (err ErrInvalidCurrencyCodeEnum) Error() string {
	return fmt.Sprintf("invalid CurrencyCodeEnum(%s)", string(err))
}
