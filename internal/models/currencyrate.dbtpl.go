package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// CurrencyRate represents a row from 'public.currency_rates'.
type CurrencyRate struct {
	Code      CurrencyCodeEnum `json:"code"`        // code
	RateToAud float64          `json:"rate_to_aud"` // rate_to_aud
	Version   int64            `json:"version"`     // version
	UpdatedAt time.Time        `json:"updated_at"`  // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [CurrencyRate] exists in the database.
func (cr *CurrencyRate) Exists() bool {
	return cr._exists
}

// Deleted returns true when the [CurrencyRate] has been marked for deletion
// from the database.
func (cr *CurrencyRate) Deleted() bool {
	return cr._deleted
}

// Insert inserts the [CurrencyRate] to the database.
func (cr *CurrencyRate) Insert(ctx context.Context, db DB) error {
	switch {
	case cr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.currency_rates (` +
		`code, rate_to_aud, version, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, cr.Code, cr.RateToAud, cr.Version, cr.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, cr.Code, cr.RateToAud, cr.Version, cr.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	cr._exists = true
	return nil
}

// Update updates a [CurrencyRate] in the database.
func (cr *CurrencyRate) Update(ctx context.Context, db DB) error {
	switch {
	case !cr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.currency_rates SET ` +
		`rate_to_aud = $1, version = $2, updated_at = $3 ` +
		`WHERE code = $4`
	// run
	logf(sqlstr, cr.RateToAud, cr.Version, cr.UpdatedAt, cr.Code)
	if _, err := db.ExecContext(ctx, sqlstr, cr.RateToAud, cr.Version, cr.UpdatedAt, cr.Code); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [CurrencyRate] to the database.
func (cr *CurrencyRate) Save(ctx context.Context, db DB) error {
	if cr.Exists() {
		return cr.Update(ctx, db)
	}
	return cr.Insert(ctx, db)
}

// Upsert performs an upsert for [CurrencyRate].
func (cr *CurrencyRate) Upsert(ctx context.Context, db DB) error {
	switch {
	case cr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.currency_rates (` +
		`code, rate_to_aud, version, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (code) DO ` +
		`UPDATE SET ` +
		`rate_to_aud = EXCLUDED.rate_to_aud, version = EXCLUDED.version, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, cr.Code, cr.RateToAud, cr.Version, cr.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, cr.Code, cr.RateToAud, cr.Version, cr.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	cr._exists = true
	return nil
}

// Delete deletes the [CurrencyRate] from the database.
func (cr *CurrencyRate) Delete(ctx context.Context, db DB) error {
	switch {
	case !cr._exists: // doesn't exist
		return nil
	case cr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.currency_rates ` +
		`WHERE code = $1`
	// run
	logf(sqlstr, cr.Code)
	if _, err := db.ExecContext(ctx, sqlstr, cr.Code); err != nil {
		return logerror(err)
	}
	// set deleted
	cr._deleted = true
	return nil
}

// CurrencyRateByCode retrieves a row from 'public.currency_rates' as a [CurrencyRate].
//
// Generated from index 'currency_rates_pkey'.
func CurrencyRateByCode(ctx context.Context, db DB, code CurrencyCodeEnum) (*CurrencyRate, error) {
	// query
	const sqlstr = `SELECT ` +
		`code, rate_to_aud, version, updated_at ` +
		`FROM public.currency_rates ` +
		`WHERE code = $1`
	// run
	logf(sqlstr, code)
	cr := CurrencyRate{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, code).Scan(&cr.Code, &cr.RateToAud, &cr.Version, &cr.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &cr, nil
}
