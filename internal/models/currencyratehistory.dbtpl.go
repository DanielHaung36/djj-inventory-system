package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// CurrencyRateHistory represents a row from 'public.currency_rate_history'.
type CurrencyRateHistory struct {
	ID            int              `json:"id"`             // id
	Code          CurrencyCodeEnum `json:"code"`           // code
	RateToAud     float64          `json:"rate_to_aud"`    // rate_to_aud
	EffectiveDate time.Time        `json:"effective_date"` // effective_date
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [CurrencyRateHistory] exists in the database.
func (crh *CurrencyRateHistory) Exists() bool {
	return crh._exists
}

// Deleted returns true when the [CurrencyRateHistory] has been marked for deletion
// from the database.
func (crh *CurrencyRateHistory) Deleted() bool {
	return crh._deleted
}

// Insert inserts the [CurrencyRateHistory] to the database.
func (crh *CurrencyRateHistory) Insert(ctx context.Context, db DB) error {
	switch {
	case crh._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case crh._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.currency_rate_history (` +
		`code, rate_to_aud, effective_date` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, crh.Code, crh.RateToAud, crh.EffectiveDate)
	if err := db.QueryRowContext(ctx, sqlstr, crh.Code, crh.RateToAud, crh.EffectiveDate).Scan(&crh.ID); err != nil {
		return logerror(err)
	}
	// set exists
	crh._exists = true
	return nil
}

// Update updates a [CurrencyRateHistory] in the database.
func (crh *CurrencyRateHistory) Update(ctx context.Context, db DB) error {
	switch {
	case !crh._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case crh._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.currency_rate_history SET ` +
		`code = $1, rate_to_aud = $2, effective_date = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, crh.Code, crh.RateToAud, crh.EffectiveDate, crh.ID)
	if _, err := db.ExecContext(ctx, sqlstr, crh.Code, crh.RateToAud, crh.EffectiveDate, crh.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [CurrencyRateHistory] to the database.
func (crh *CurrencyRateHistory) Save(ctx context.Context, db DB) error {
	if crh.Exists() {
		return crh.Update(ctx, db)
	}
	return crh.Insert(ctx, db)
}

// Upsert performs an upsert for [CurrencyRateHistory].
func (crh *CurrencyRateHistory) Upsert(ctx context.Context, db DB) error {
	switch {
	case crh._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.currency_rate_history (` +
		`id, code, rate_to_aud, effective_date` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`code = EXCLUDED.code, rate_to_aud = EXCLUDED.rate_to_aud, effective_date = EXCLUDED.effective_date `
	// run
	logf(sqlstr, crh.ID, crh.Code, crh.RateToAud, crh.EffectiveDate)
	if _, err := db.ExecContext(ctx, sqlstr, crh.ID, crh.Code, crh.RateToAud, crh.EffectiveDate); err != nil {
		return logerror(err)
	}
	// set exists
	crh._exists = true
	return nil
}

// Delete deletes the [CurrencyRateHistory] from the database.
func (crh *CurrencyRateHistory) Delete(ctx context.Context, db DB) error {
	switch {
	case !crh._exists: // doesn't exist
		return nil
	case crh._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.currency_rate_history ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, crh.ID)
	if _, err := db.ExecContext(ctx, sqlstr, crh.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	crh._deleted = true
	return nil
}

// CurrencyRateHistoryByID retrieves a row from 'public.currency_rate_history' as a [CurrencyRateHistory].
//
// Generated from index 'currency_rate_history_pkey'.
func CurrencyRateHistoryByID(ctx context.Context, db DB, id int) (*CurrencyRateHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, rate_to_aud, effective_date ` +
		`FROM public.currency_rate_history ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	crh := CurrencyRateHistory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&crh.ID, &crh.Code, &crh.RateToAud, &crh.EffectiveDate); err != nil {
		return nil, logerror(err)
	}
	return &crh, nil
}

// CurrencyRateHistoryByCodeEffectiveDate retrieves a row from 'public.currency_rate_history' as a [CurrencyRateHistory].
//
// Generated from index 'idx_crh_code_date'.
func CurrencyRateHistoryByCodeEffectiveDate(ctx context.Context, db DB, code CurrencyCodeEnum, effectiveDate time.Time) ([]*CurrencyRateHistory, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, rate_to_aud, effective_date ` +
		`FROM public.currency_rate_history ` +
		`WHERE code = $1 AND effective_date = $2`
	// run
	logf(sqlstr, code, effectiveDate)
	rows, err := db.QueryContext(ctx, sqlstr, code, effectiveDate)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*CurrencyRateHistory
	for rows.Next() {
		crh := CurrencyRateHistory{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&crh.ID, &crh.Code, &crh.RateToAud, &crh.EffectiveDate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &crh)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
