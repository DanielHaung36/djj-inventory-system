package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Customer represents a row from 'public.customers'.
type Customer struct {
	ID        int              `json:"id"`         // id
	StoreID   sql.NullInt64    `json:"store_id"`   // store_id
	Type      CustomerTypeEnum `json:"type"`       // type
	Name      string           `json:"name"`       // name
	Phone     sql.NullString   `json:"phone"`      // phone
	Email     sql.NullString   `json:"email"`      // email
	Address   sql.NullString   `json:"address"`    // address
	Version   int64            `json:"version"`    // version
	CreatedAt time.Time        `json:"created_at"` // created_at
	UpdatedAt time.Time        `json:"updated_at"` // updated_at
	IsDeleted bool             `json:"is_deleted"` // is_deleted
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Customer] exists in the database.
func (c *Customer) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Customer] has been marked for deletion
// from the database.
func (c *Customer) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Customer] to the database.
func (c *Customer) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.customers (` +
		`store_id, type, name, phone, email, address, version, created_at, updated_at, is_deleted` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) RETURNING id`
	// run
	logf(sqlstr, c.StoreID, c.Type, c.Name, c.Phone, c.Email, c.Address, c.Version, c.CreatedAt, c.UpdatedAt, c.IsDeleted)
	if err := db.QueryRowContext(ctx, sqlstr, c.StoreID, c.Type, c.Name, c.Phone, c.Email, c.Address, c.Version, c.CreatedAt, c.UpdatedAt, c.IsDeleted).Scan(&c.ID); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Customer] in the database.
func (c *Customer) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.customers SET ` +
		`store_id = $1, type = $2, name = $3, phone = $4, email = $5, address = $6, version = $7, created_at = $8, updated_at = $9, is_deleted = $10 ` +
		`WHERE id = $11`
	// run
	logf(sqlstr, c.StoreID, c.Type, c.Name, c.Phone, c.Email, c.Address, c.Version, c.CreatedAt, c.UpdatedAt, c.IsDeleted, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.StoreID, c.Type, c.Name, c.Phone, c.Email, c.Address, c.Version, c.CreatedAt, c.UpdatedAt, c.IsDeleted, c.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Customer] to the database.
func (c *Customer) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Customer].
func (c *Customer) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.customers (` +
		`id, store_id, type, name, phone, email, address, version, created_at, updated_at, is_deleted` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`store_id = EXCLUDED.store_id, type = EXCLUDED.type, name = EXCLUDED.name, phone = EXCLUDED.phone, email = EXCLUDED.email, address = EXCLUDED.address, version = EXCLUDED.version, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, is_deleted = EXCLUDED.is_deleted `
	// run
	logf(sqlstr, c.ID, c.StoreID, c.Type, c.Name, c.Phone, c.Email, c.Address, c.Version, c.CreatedAt, c.UpdatedAt, c.IsDeleted)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID, c.StoreID, c.Type, c.Name, c.Phone, c.Email, c.Address, c.Version, c.CreatedAt, c.UpdatedAt, c.IsDeleted); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Customer] from the database.
func (c *Customer) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.customers ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, c.ID)
	if _, err := db.ExecContext(ctx, sqlstr, c.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CustomerByID retrieves a row from 'public.customers' as a [Customer].
//
// Generated from index 'customers_pkey'.
func CustomerByID(ctx context.Context, db DB, id int) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, type, name, phone, email, address, version, created_at, updated_at, is_deleted ` +
		`FROM public.customers ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&c.ID, &c.StoreID, &c.Type, &c.Name, &c.Phone, &c.Email, &c.Address, &c.Version, &c.CreatedAt, &c.UpdatedAt, &c.IsDeleted); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CustomersByStoreID retrieves a row from 'public.customers' as a [Customer].
//
// Generated from index 'idx_customers_store'.
func CustomersByStoreID(ctx context.Context, db DB, storeID sql.NullInt64) ([]*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, type, name, phone, email, address, version, created_at, updated_at, is_deleted ` +
		`FROM public.customers ` +
		`WHERE store_id = $1`
	// run
	logf(sqlstr, storeID)
	rows, err := db.QueryContext(ctx, sqlstr, storeID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Customer
	for rows.Next() {
		c := Customer{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.ID, &c.StoreID, &c.Type, &c.Name, &c.Phone, &c.Email, &c.Address, &c.Version, &c.CreatedAt, &c.UpdatedAt, &c.IsDeleted); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
