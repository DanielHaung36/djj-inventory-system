package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// CustomerActivity represents a row from 'public.customer_activities'.
type CustomerActivity struct {
	ID           int            `json:"id"`            // id
	CustomerID   int            `json:"customer_id"`   // customer_id
	ActivityType sql.NullString `json:"activity_type"` // activity_type
	CreatedAt    time.Time      `json:"created_at"`    // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [CustomerActivity] exists in the database.
func (ca *CustomerActivity) Exists() bool {
	return ca._exists
}

// Deleted returns true when the [CustomerActivity] has been marked for deletion
// from the database.
func (ca *CustomerActivity) Deleted() bool {
	return ca._deleted
}

// Insert inserts the [CustomerActivity] to the database.
func (ca *CustomerActivity) Insert(ctx context.Context, db DB) error {
	switch {
	case ca._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ca._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.customer_activities (` +
		`customer_id, activity_type, created_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, ca.CustomerID, ca.ActivityType, ca.CreatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, ca.CustomerID, ca.ActivityType, ca.CreatedAt).Scan(&ca.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ca._exists = true
	return nil
}

// Update updates a [CustomerActivity] in the database.
func (ca *CustomerActivity) Update(ctx context.Context, db DB) error {
	switch {
	case !ca._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ca._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.customer_activities SET ` +
		`customer_id = $1, activity_type = $2, created_at = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, ca.CustomerID, ca.ActivityType, ca.CreatedAt, ca.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ca.CustomerID, ca.ActivityType, ca.CreatedAt, ca.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [CustomerActivity] to the database.
func (ca *CustomerActivity) Save(ctx context.Context, db DB) error {
	if ca.Exists() {
		return ca.Update(ctx, db)
	}
	return ca.Insert(ctx, db)
}

// Upsert performs an upsert for [CustomerActivity].
func (ca *CustomerActivity) Upsert(ctx context.Context, db DB) error {
	switch {
	case ca._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.customer_activities (` +
		`id, customer_id, activity_type, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`customer_id = EXCLUDED.customer_id, activity_type = EXCLUDED.activity_type, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, ca.ID, ca.CustomerID, ca.ActivityType, ca.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, ca.ID, ca.CustomerID, ca.ActivityType, ca.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	ca._exists = true
	return nil
}

// Delete deletes the [CustomerActivity] from the database.
func (ca *CustomerActivity) Delete(ctx context.Context, db DB) error {
	switch {
	case !ca._exists: // doesn't exist
		return nil
	case ca._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.customer_activities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ca.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ca.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ca._deleted = true
	return nil
}

// CustomerActivityByID retrieves a row from 'public.customer_activities' as a [CustomerActivity].
//
// Generated from index 'customer_activities_pkey'.
func CustomerActivityByID(ctx context.Context, db DB, id int) (*CustomerActivity, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, customer_id, activity_type, created_at ` +
		`FROM public.customer_activities ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ca := CustomerActivity{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ca.ID, &ca.CustomerID, &ca.ActivityType, &ca.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ca, nil
}
