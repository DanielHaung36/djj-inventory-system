package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// CustomerTypeEnum is the 'customer_type_enum' enum type from schema 'public'.
type CustomerTypeEnum uint16

// CustomerTypeEnum values.
const (
	// CustomerTypeEnumRetail is the 'retail' customer_type_enum.
	CustomerTypeEnumRetail CustomerTypeEnum = 1
	// CustomerTypeEnumWholesale is the 'wholesale' customer_type_enum.
	CustomerTypeEnumWholesale CustomerTypeEnum = 2
	// CustomerTypeEnumOnline is the 'online' customer_type_enum.
	CustomerTypeEnumOnline CustomerTypeEnum = 3
)

// String satisfies the [fmt.Stringer] interface.
func (cte CustomerTypeEnum) String() string {
	switch cte {
	case CustomerTypeEnumRetail:
		return "retail"
	case CustomerTypeEnumWholesale:
		return "wholesale"
	case CustomerTypeEnumOnline:
		return "online"
	}
	return fmt.Sprintf("CustomerTypeEnum(%d)", cte)
}

// MarshalText marshals [CustomerTypeEnum] into text.
func (cte CustomerTypeEnum) MarshalText() ([]byte, error) {
	return []byte(cte.String()), nil
}

// UnmarshalText unmarshals [CustomerTypeEnum] from text.
func (cte *CustomerTypeEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "retail":
		*cte = CustomerTypeEnumRetail
	case "wholesale":
		*cte = CustomerTypeEnumWholesale
	case "online":
		*cte = CustomerTypeEnumOnline
	default:
		return ErrInvalidCustomerTypeEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (cte CustomerTypeEnum) Value() (driver.Value, error) {
	return cte.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (cte *CustomerTypeEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return cte.UnmarshalText(x)
	case string:
		return cte.UnmarshalText([]byte(x))
	}
	return ErrInvalidCustomerTypeEnum(fmt.Sprintf("%T", v))
}

// NullCustomerTypeEnum represents a null 'customer_type_enum' enum for schema 'public'.
type NullCustomerTypeEnum struct {
	CustomerTypeEnum CustomerTypeEnum
	// Valid is true if [CustomerTypeEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (ncte NullCustomerTypeEnum) Value() (driver.Value, error) {
	if !ncte.Valid {
		return nil, nil
	}
	return ncte.CustomerTypeEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (ncte *NullCustomerTypeEnum) Scan(v any) error {
	if v == nil {
		ncte.CustomerTypeEnum, ncte.Valid = 0, false
		return nil
	}
	err := ncte.CustomerTypeEnum.Scan(v)
	ncte.Valid = err == nil
	return err
}

// ErrInvalidCustomerTypeEnum is the invalid [CustomerTypeEnum] error.
type ErrInvalidCustomerTypeEnum string

// Error satisfies the error interface.
func (err ErrInvalidCustomerTypeEnum) Error() string {
	return fmt.Sprintf("invalid CustomerTypeEnum(%s)", string(err))
}
