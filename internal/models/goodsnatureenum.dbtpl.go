package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// GoodsNatureEnum is the 'goods_nature_enum' enum type from schema 'public'.
type GoodsNatureEnum uint16

// GoodsNatureEnum values.
const (
	// GoodsNatureEnumContract is the 'contract' goods_nature_enum.
	GoodsNatureEnumContract GoodsNatureEnum = 1
	// GoodsNatureEnumMultiContract is the 'multi_contract' goods_nature_enum.
	GoodsNatureEnumMultiContract GoodsNatureEnum = 2
	// GoodsNatureEnumPartialContract is the 'partial_contract' goods_nature_enum.
	GoodsNatureEnumPartialContract GoodsNatureEnum = 3
	// GoodsNatureEnumWarranty is the 'warranty' goods_nature_enum.
	GoodsNatureEnumWarranty GoodsNatureEnum = 4
	// GoodsNatureEnumGift is the 'gift' goods_nature_enum.
	GoodsNatureEnumGift GoodsNatureEnum = 5
	// GoodsNatureEnumSelfPurchased is the 'self_purchased' goods_nature_enum.
	GoodsNatureEnumSelfPurchased GoodsNatureEnum = 6
	// GoodsNatureEnumConsignment is the 'consignment' goods_nature_enum.
	GoodsNatureEnumConsignment GoodsNatureEnum = 7
)

// String satisfies the [fmt.Stringer] interface.
func (gne GoodsNatureEnum) String() string {
	switch gne {
	case GoodsNatureEnumContract:
		return "contract"
	case GoodsNatureEnumMultiContract:
		return "multi_contract"
	case GoodsNatureEnumPartialContract:
		return "partial_contract"
	case GoodsNatureEnumWarranty:
		return "warranty"
	case GoodsNatureEnumGift:
		return "gift"
	case GoodsNatureEnumSelfPurchased:
		return "self_purchased"
	case GoodsNatureEnumConsignment:
		return "consignment"
	}
	return fmt.Sprintf("GoodsNatureEnum(%d)", gne)
}

// MarshalText marshals [GoodsNatureEnum] into text.
func (gne GoodsNatureEnum) MarshalText() ([]byte, error) {
	return []byte(gne.String()), nil
}

// UnmarshalText unmarshals [GoodsNatureEnum] from text.
func (gne *GoodsNatureEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "contract":
		*gne = GoodsNatureEnumContract
	case "multi_contract":
		*gne = GoodsNatureEnumMultiContract
	case "partial_contract":
		*gne = GoodsNatureEnumPartialContract
	case "warranty":
		*gne = GoodsNatureEnumWarranty
	case "gift":
		*gne = GoodsNatureEnumGift
	case "self_purchased":
		*gne = GoodsNatureEnumSelfPurchased
	case "consignment":
		*gne = GoodsNatureEnumConsignment
	default:
		return ErrInvalidGoodsNatureEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (gne GoodsNatureEnum) Value() (driver.Value, error) {
	return gne.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (gne *GoodsNatureEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return gne.UnmarshalText(x)
	case string:
		return gne.UnmarshalText([]byte(x))
	}
	return ErrInvalidGoodsNatureEnum(fmt.Sprintf("%T", v))
}

// NullGoodsNatureEnum represents a null 'goods_nature_enum' enum for schema 'public'.
type NullGoodsNatureEnum struct {
	GoodsNatureEnum GoodsNatureEnum
	// Valid is true if [GoodsNatureEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (ngne NullGoodsNatureEnum) Value() (driver.Value, error) {
	if !ngne.Valid {
		return nil, nil
	}
	return ngne.GoodsNatureEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (ngne *NullGoodsNatureEnum) Scan(v any) error {
	if v == nil {
		ngne.GoodsNatureEnum, ngne.Valid = 0, false
		return nil
	}
	err := ngne.GoodsNatureEnum.Scan(v)
	ngne.Valid = err == nil
	return err
}

// ErrInvalidGoodsNatureEnum is the invalid [GoodsNatureEnum] error.
type ErrInvalidGoodsNatureEnum string

// Error satisfies the error interface.
func (err ErrInvalidGoodsNatureEnum) Error() string {
	return fmt.Sprintf("invalid GoodsNatureEnum(%s)", string(err))
}
