package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// InventoryLog represents a row from 'public.inventory_logs'.
type InventoryLog struct {
	ID          int            `json:"id"`           // id
	InventoryID int            `json:"inventory_id"` // inventory_id
	ChangeType  string         `json:"change_type"`  // change_type
	Quantity    int            `json:"quantity"`     // quantity
	Operator    sql.NullString `json:"operator"`     // operator
	Remark      sql.NullString `json:"remark"`       // remark
	CreatedAt   time.Time      `json:"created_at"`   // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [InventoryLog] exists in the database.
func (il *InventoryLog) Exists() bool {
	return il._exists
}

// Deleted returns true when the [InventoryLog] has been marked for deletion
// from the database.
func (il *InventoryLog) Deleted() bool {
	return il._deleted
}

// Insert inserts the [InventoryLog] to the database.
func (il *InventoryLog) Insert(ctx context.Context, db DB) error {
	switch {
	case il._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case il._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.inventory_logs (` +
		`inventory_id, change_type, quantity, operator, remark, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, il.InventoryID, il.ChangeType, il.Quantity, il.Operator, il.Remark, il.CreatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, il.InventoryID, il.ChangeType, il.Quantity, il.Operator, il.Remark, il.CreatedAt).Scan(&il.ID); err != nil {
		return logerror(err)
	}
	// set exists
	il._exists = true
	return nil
}

// Update updates a [InventoryLog] in the database.
func (il *InventoryLog) Update(ctx context.Context, db DB) error {
	switch {
	case !il._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case il._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.inventory_logs SET ` +
		`inventory_id = $1, change_type = $2, quantity = $3, operator = $4, remark = $5, created_at = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, il.InventoryID, il.ChangeType, il.Quantity, il.Operator, il.Remark, il.CreatedAt, il.ID)
	if _, err := db.ExecContext(ctx, sqlstr, il.InventoryID, il.ChangeType, il.Quantity, il.Operator, il.Remark, il.CreatedAt, il.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [InventoryLog] to the database.
func (il *InventoryLog) Save(ctx context.Context, db DB) error {
	if il.Exists() {
		return il.Update(ctx, db)
	}
	return il.Insert(ctx, db)
}

// Upsert performs an upsert for [InventoryLog].
func (il *InventoryLog) Upsert(ctx context.Context, db DB) error {
	switch {
	case il._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.inventory_logs (` +
		`id, inventory_id, change_type, quantity, operator, remark, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`inventory_id = EXCLUDED.inventory_id, change_type = EXCLUDED.change_type, quantity = EXCLUDED.quantity, operator = EXCLUDED.operator, remark = EXCLUDED.remark, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, il.ID, il.InventoryID, il.ChangeType, il.Quantity, il.Operator, il.Remark, il.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, il.ID, il.InventoryID, il.ChangeType, il.Quantity, il.Operator, il.Remark, il.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	il._exists = true
	return nil
}

// Delete deletes the [InventoryLog] from the database.
func (il *InventoryLog) Delete(ctx context.Context, db DB) error {
	switch {
	case !il._exists: // doesn't exist
		return nil
	case il._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.inventory_logs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, il.ID)
	if _, err := db.ExecContext(ctx, sqlstr, il.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	il._deleted = true
	return nil
}

// InventoryLogsByInventoryID retrieves a row from 'public.inventory_logs' as a [InventoryLog].
//
// Generated from index 'idx_invlog_inventory'.
func InventoryLogsByInventoryID(ctx context.Context, db DB, inventoryID int) ([]*InventoryLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, inventory_id, change_type, quantity, operator, remark, created_at ` +
		`FROM public.inventory_logs ` +
		`WHERE inventory_id = $1`
	// run
	logf(sqlstr, inventoryID)
	rows, err := db.QueryContext(ctx, sqlstr, inventoryID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*InventoryLog
	for rows.Next() {
		il := InventoryLog{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&il.ID, &il.InventoryID, &il.ChangeType, &il.Quantity, &il.Operator, &il.Remark, &il.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &il)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// InventoryLogByID retrieves a row from 'public.inventory_logs' as a [InventoryLog].
//
// Generated from index 'inventory_logs_pkey'.
func InventoryLogByID(ctx context.Context, db DB, id int) (*InventoryLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, inventory_id, change_type, quantity, operator, remark, created_at ` +
		`FROM public.inventory_logs ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	il := InventoryLog{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&il.ID, &il.InventoryID, &il.ChangeType, &il.Quantity, &il.Operator, &il.Remark, &il.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &il, nil
}
