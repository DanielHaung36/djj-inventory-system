package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// OrderStatusEnum is the 'order_status_enum' enum type from schema 'public'.
type OrderStatusEnum uint16

// OrderStatusEnum values.
const (
	// OrderStatusEnumDraft is the 'draft' order_status_enum.
	OrderStatusEnumDraft OrderStatusEnum = 1
	// OrderStatusEnumOrdered is the 'ordered' order_status_enum.
	OrderStatusEnumOrdered OrderStatusEnum = 2
	// OrderStatusEnumDepositReceived is the 'deposit_received' order_status_enum.
	OrderStatusEnumDepositReceived OrderStatusEnum = 3
	// OrderStatusEnumFinalPaymentReceived is the 'final_payment_received' order_status_enum.
	OrderStatusEnumFinalPaymentReceived OrderStatusEnum = 4
	// OrderStatusEnumPreDeliveryInspection is the 'pre_delivery_inspection' order_status_enum.
	OrderStatusEnumPreDeliveryInspection OrderStatusEnum = 5
	// OrderStatusEnumShipped is the 'shipped' order_status_enum.
	OrderStatusEnumShipped OrderStatusEnum = 6
	// OrderStatusEnumDelivered is the 'delivered' order_status_enum.
	OrderStatusEnumDelivered OrderStatusEnum = 7
	// OrderStatusEnumOrderClosed is the 'order_closed' order_status_enum.
	OrderStatusEnumOrderClosed OrderStatusEnum = 8
	// OrderStatusEnumCancelled is the 'cancelled' order_status_enum.
	OrderStatusEnumCancelled OrderStatusEnum = 9
)

// String satisfies the [fmt.Stringer] interface.
func (ose OrderStatusEnum) String() string {
	switch ose {
	case OrderStatusEnumDraft:
		return "draft"
	case OrderStatusEnumOrdered:
		return "ordered"
	case OrderStatusEnumDepositReceived:
		return "deposit_received"
	case OrderStatusEnumFinalPaymentReceived:
		return "final_payment_received"
	case OrderStatusEnumPreDeliveryInspection:
		return "pre_delivery_inspection"
	case OrderStatusEnumShipped:
		return "shipped"
	case OrderStatusEnumDelivered:
		return "delivered"
	case OrderStatusEnumOrderClosed:
		return "order_closed"
	case OrderStatusEnumCancelled:
		return "cancelled"
	}
	return fmt.Sprintf("OrderStatusEnum(%d)", ose)
}

// MarshalText marshals [OrderStatusEnum] into text.
func (ose OrderStatusEnum) MarshalText() ([]byte, error) {
	return []byte(ose.String()), nil
}

// UnmarshalText unmarshals [OrderStatusEnum] from text.
func (ose *OrderStatusEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "draft":
		*ose = OrderStatusEnumDraft
	case "ordered":
		*ose = OrderStatusEnumOrdered
	case "deposit_received":
		*ose = OrderStatusEnumDepositReceived
	case "final_payment_received":
		*ose = OrderStatusEnumFinalPaymentReceived
	case "pre_delivery_inspection":
		*ose = OrderStatusEnumPreDeliveryInspection
	case "shipped":
		*ose = OrderStatusEnumShipped
	case "delivered":
		*ose = OrderStatusEnumDelivered
	case "order_closed":
		*ose = OrderStatusEnumOrderClosed
	case "cancelled":
		*ose = OrderStatusEnumCancelled
	default:
		return ErrInvalidOrderStatusEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (ose OrderStatusEnum) Value() (driver.Value, error) {
	return ose.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (ose *OrderStatusEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return ose.UnmarshalText(x)
	case string:
		return ose.UnmarshalText([]byte(x))
	}
	return ErrInvalidOrderStatusEnum(fmt.Sprintf("%T", v))
}

// NullOrderStatusEnum represents a null 'order_status_enum' enum for schema 'public'.
type NullOrderStatusEnum struct {
	OrderStatusEnum OrderStatusEnum
	// Valid is true if [OrderStatusEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nose NullOrderStatusEnum) Value() (driver.Value, error) {
	if !nose.Valid {
		return nil, nil
	}
	return nose.OrderStatusEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nose *NullOrderStatusEnum) Scan(v any) error {
	if v == nil {
		nose.OrderStatusEnum, nose.Valid = 0, false
		return nil
	}
	err := nose.OrderStatusEnum.Scan(v)
	nose.Valid = err == nil
	return err
}

// ErrInvalidOrderStatusEnum is the invalid [OrderStatusEnum] error.
type ErrInvalidOrderStatusEnum string

// Error satisfies the error interface.
func (err ErrInvalidOrderStatusEnum) Error() string {
	return fmt.Sprintf("invalid OrderStatusEnum(%s)", string(err))
}
