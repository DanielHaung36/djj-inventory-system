package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// OrderTypeEnum is the 'order_type_enum' enum type from schema 'public'.
type OrderTypeEnum uint16

// OrderTypeEnum values.
const (
	// OrderTypeEnumPurchase is the 'purchase' order_type_enum.
	OrderTypeEnumPurchase OrderTypeEnum = 1
	// OrderTypeEnumSales is the 'sales' order_type_enum.
	OrderTypeEnumSales OrderTypeEnum = 2
)

// String satisfies the [fmt.Stringer] interface.
func (ote OrderTypeEnum) String() string {
	switch ote {
	case OrderTypeEnumPurchase:
		return "purchase"
	case OrderTypeEnumSales:
		return "sales"
	}
	return fmt.Sprintf("OrderTypeEnum(%d)", ote)
}

// MarshalText marshals [OrderTypeEnum] into text.
func (ote OrderTypeEnum) MarshalText() ([]byte, error) {
	return []byte(ote.String()), nil
}

// UnmarshalText unmarshals [OrderTypeEnum] from text.
func (ote *OrderTypeEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "purchase":
		*ote = OrderTypeEnumPurchase
	case "sales":
		*ote = OrderTypeEnumSales
	default:
		return ErrInvalidOrderTypeEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (ote OrderTypeEnum) Value() (driver.Value, error) {
	return ote.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (ote *OrderTypeEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return ote.UnmarshalText(x)
	case string:
		return ote.UnmarshalText([]byte(x))
	}
	return ErrInvalidOrderTypeEnum(fmt.Sprintf("%T", v))
}

// NullOrderTypeEnum represents a null 'order_type_enum' enum for schema 'public'.
type NullOrderTypeEnum struct {
	OrderTypeEnum OrderTypeEnum
	// Valid is true if [OrderTypeEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (note NullOrderTypeEnum) Value() (driver.Value, error) {
	if !note.Valid {
		return nil, nil
	}
	return note.OrderTypeEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (note *NullOrderTypeEnum) Scan(v any) error {
	if v == nil {
		note.OrderTypeEnum, note.Valid = 0, false
		return nil
	}
	err := note.OrderTypeEnum.Scan(v)
	note.Valid = err == nil
	return err
}

// ErrInvalidOrderTypeEnum is the invalid [OrderTypeEnum] error.
type ErrInvalidOrderTypeEnum string

// Error satisfies the error interface.
func (err ErrInvalidOrderTypeEnum) Error() string {
	return fmt.Sprintf("invalid OrderTypeEnum(%s)", string(err))
}
