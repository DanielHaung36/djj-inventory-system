package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
)

// Permission represents a row from 'public.permissions'.
type Permission struct {
	ID   int    `json:"id"`   // id
	Name string `json:"name"` // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Permission] exists in the database.
func (p *Permission) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Permission] has been marked for deletion
// from the database.
func (p *Permission) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Permission] to the database.
func (p *Permission) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.permissions (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.Name)
	if err := db.QueryRowContext(ctx, sqlstr, p.Name).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Permission] in the database.
func (p *Permission) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.permissions SET ` +
		`name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, p.Name, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.Name, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Permission] to the database.
func (p *Permission) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Permission].
func (p *Permission) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.permissions (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, p.ID, p.Name)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.Name); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Permission] from the database.
func (p *Permission) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.permissions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PermissionByName retrieves a row from 'public.permissions' as a [Permission].
//
// Generated from index 'permissions_name_key'.
func PermissionByName(ctx context.Context, db DB, name string) (*Permission, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.permissions ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	p := Permission{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&p.ID, &p.Name); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// PermissionByID retrieves a row from 'public.permissions' as a [Permission].
//
// Generated from index 'permissions_pkey'.
func PermissionByID(ctx context.Context, db DB, id int) (*Permission, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.permissions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Permission{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.Name); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
