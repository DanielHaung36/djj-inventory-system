package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// ProductAttachment represents a row from 'public.product_attachments'.
type ProductAttachment struct {
	ID         int           `json:"id"`          // id
	ProductID  int           `json:"product_id"`  // product_id
	FileName   string        `json:"file_name"`   // file_name
	FileType   string        `json:"file_type"`   // file_type
	FileSize   sql.NullInt64 `json:"file_size"`   // file_size
	URL        string        `json:"url"`         // url
	UploadedBy sql.NullInt64 `json:"uploaded_by"` // uploaded_by
	UploadedAt time.Time     `json:"uploaded_at"` // uploaded_at
	Metadata   []byte        `json:"metadata"`    // metadata
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ProductAttachment] exists in the database.
func (pa *ProductAttachment) Exists() bool {
	return pa._exists
}

// Deleted returns true when the [ProductAttachment] has been marked for deletion
// from the database.
func (pa *ProductAttachment) Deleted() bool {
	return pa._deleted
}

// Insert inserts the [ProductAttachment] to the database.
func (pa *ProductAttachment) Insert(ctx context.Context, db DB) error {
	switch {
	case pa._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pa._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.product_attachments (` +
		`product_id, file_name, file_type, file_size, url, uploaded_by, uploaded_at, metadata` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING id`
	// run
	logf(sqlstr, pa.ProductID, pa.FileName, pa.FileType, pa.FileSize, pa.URL, pa.UploadedBy, pa.UploadedAt, pa.Metadata)
	if err := db.QueryRowContext(ctx, sqlstr, pa.ProductID, pa.FileName, pa.FileType, pa.FileSize, pa.URL, pa.UploadedBy, pa.UploadedAt, pa.Metadata).Scan(&pa.ID); err != nil {
		return logerror(err)
	}
	// set exists
	pa._exists = true
	return nil
}

// Update updates a [ProductAttachment] in the database.
func (pa *ProductAttachment) Update(ctx context.Context, db DB) error {
	switch {
	case !pa._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pa._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.product_attachments SET ` +
		`product_id = $1, file_name = $2, file_type = $3, file_size = $4, url = $5, uploaded_by = $6, uploaded_at = $7, metadata = $8 ` +
		`WHERE id = $9`
	// run
	logf(sqlstr, pa.ProductID, pa.FileName, pa.FileType, pa.FileSize, pa.URL, pa.UploadedBy, pa.UploadedAt, pa.Metadata, pa.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pa.ProductID, pa.FileName, pa.FileType, pa.FileSize, pa.URL, pa.UploadedBy, pa.UploadedAt, pa.Metadata, pa.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ProductAttachment] to the database.
func (pa *ProductAttachment) Save(ctx context.Context, db DB) error {
	if pa.Exists() {
		return pa.Update(ctx, db)
	}
	return pa.Insert(ctx, db)
}

// Upsert performs an upsert for [ProductAttachment].
func (pa *ProductAttachment) Upsert(ctx context.Context, db DB) error {
	switch {
	case pa._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.product_attachments (` +
		`id, product_id, file_name, file_type, file_size, url, uploaded_by, uploaded_at, metadata` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`product_id = EXCLUDED.product_id, file_name = EXCLUDED.file_name, file_type = EXCLUDED.file_type, file_size = EXCLUDED.file_size, url = EXCLUDED.url, uploaded_by = EXCLUDED.uploaded_by, uploaded_at = EXCLUDED.uploaded_at, metadata = EXCLUDED.metadata `
	// run
	logf(sqlstr, pa.ID, pa.ProductID, pa.FileName, pa.FileType, pa.FileSize, pa.URL, pa.UploadedBy, pa.UploadedAt, pa.Metadata)
	if _, err := db.ExecContext(ctx, sqlstr, pa.ID, pa.ProductID, pa.FileName, pa.FileType, pa.FileSize, pa.URL, pa.UploadedBy, pa.UploadedAt, pa.Metadata); err != nil {
		return logerror(err)
	}
	// set exists
	pa._exists = true
	return nil
}

// Delete deletes the [ProductAttachment] from the database.
func (pa *ProductAttachment) Delete(ctx context.Context, db DB) error {
	switch {
	case !pa._exists: // doesn't exist
		return nil
	case pa._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.product_attachments ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, pa.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pa.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pa._deleted = true
	return nil
}

// ProductAttachmentsByProductID retrieves a row from 'public.product_attachments' as a [ProductAttachment].
//
// Generated from index 'idx_prod_attach_product'.
func ProductAttachmentsByProductID(ctx context.Context, db DB, productID int) ([]*ProductAttachment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, product_id, file_name, file_type, file_size, url, uploaded_by, uploaded_at, metadata ` +
		`FROM public.product_attachments ` +
		`WHERE product_id = $1`
	// run
	logf(sqlstr, productID)
	rows, err := db.QueryContext(ctx, sqlstr, productID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ProductAttachment
	for rows.Next() {
		pa := ProductAttachment{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&pa.ID, &pa.ProductID, &pa.FileName, &pa.FileType, &pa.FileSize, &pa.URL, &pa.UploadedBy, &pa.UploadedAt, &pa.Metadata); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &pa)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ProductAttachmentByID retrieves a row from 'public.product_attachments' as a [ProductAttachment].
//
// Generated from index 'product_attachments_pkey'.
func ProductAttachmentByID(ctx context.Context, db DB, id int) (*ProductAttachment, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, product_id, file_name, file_type, file_size, url, uploaded_by, uploaded_at, metadata ` +
		`FROM public.product_attachments ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	pa := ProductAttachment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pa.ID, &pa.ProductID, &pa.FileName, &pa.FileType, &pa.FileSize, &pa.URL, &pa.UploadedBy, &pa.UploadedAt, &pa.Metadata); err != nil {
		return nil, logerror(err)
	}
	return &pa, nil
}
