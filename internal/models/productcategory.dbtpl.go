package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// ProductCategory represents a row from 'public.product_categories'.
type ProductCategory struct {
	ID        int           `json:"id"`         // id
	Name      string        `json:"name"`       // name
	ParentID  sql.NullInt64 `json:"parent_id"`  // parent_id
	CreatedAt time.Time     `json:"created_at"` // created_at
	UpdatedAt time.Time     `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ProductCategory] exists in the database.
func (pc *ProductCategory) Exists() bool {
	return pc._exists
}

// Deleted returns true when the [ProductCategory] has been marked for deletion
// from the database.
func (pc *ProductCategory) Deleted() bool {
	return pc._deleted
}

// Insert inserts the [ProductCategory] to the database.
func (pc *ProductCategory) Insert(ctx context.Context, db DB) error {
	switch {
	case pc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.product_categories (` +
		`name, parent_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, pc.Name, pc.ParentID, pc.CreatedAt, pc.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, pc.Name, pc.ParentID, pc.CreatedAt, pc.UpdatedAt).Scan(&pc.ID); err != nil {
		return logerror(err)
	}
	// set exists
	pc._exists = true
	return nil
}

// Update updates a [ProductCategory] in the database.
func (pc *ProductCategory) Update(ctx context.Context, db DB) error {
	switch {
	case !pc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.product_categories SET ` +
		`name = $1, parent_id = $2, created_at = $3, updated_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, pc.Name, pc.ParentID, pc.CreatedAt, pc.UpdatedAt, pc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pc.Name, pc.ParentID, pc.CreatedAt, pc.UpdatedAt, pc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ProductCategory] to the database.
func (pc *ProductCategory) Save(ctx context.Context, db DB) error {
	if pc.Exists() {
		return pc.Update(ctx, db)
	}
	return pc.Insert(ctx, db)
}

// Upsert performs an upsert for [ProductCategory].
func (pc *ProductCategory) Upsert(ctx context.Context, db DB) error {
	switch {
	case pc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.product_categories (` +
		`id, name, parent_id, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, parent_id = EXCLUDED.parent_id, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, pc.ID, pc.Name, pc.ParentID, pc.CreatedAt, pc.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ID, pc.Name, pc.ParentID, pc.CreatedAt, pc.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	pc._exists = true
	return nil
}

// Delete deletes the [ProductCategory] from the database.
func (pc *ProductCategory) Delete(ctx context.Context, db DB) error {
	switch {
	case !pc._exists: // doesn't exist
		return nil
	case pc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.product_categories ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, pc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pc._deleted = true
	return nil
}

// ProductCategoryByName retrieves a row from 'public.product_categories' as a [ProductCategory].
//
// Generated from index 'product_categories_name_key'.
func ProductCategoryByName(ctx context.Context, db DB, name string) (*ProductCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, parent_id, created_at, updated_at ` +
		`FROM public.product_categories ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	pc := ProductCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&pc.ID, &pc.Name, &pc.ParentID, &pc.CreatedAt, &pc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &pc, nil
}

// ProductCategoryByID retrieves a row from 'public.product_categories' as a [ProductCategory].
//
// Generated from index 'product_categories_pkey'.
func ProductCategoryByID(ctx context.Context, db DB, id int) (*ProductCategory, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, parent_id, created_at, updated_at ` +
		`FROM public.product_categories ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	pc := ProductCategory{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pc.ID, &pc.Name, &pc.ParentID, &pc.CreatedAt, &pc.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &pc, nil
}
