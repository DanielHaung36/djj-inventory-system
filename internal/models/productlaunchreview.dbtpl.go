package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// ProductLaunchReview represents a row from 'public.product_launch_reviews'.
type ProductLaunchReview struct {
	ID         int                `json:"id"`          // id
	ProductID  int                `json:"product_id"`  // product_id
	Stage      ReviewStageEnum    `json:"stage"`       // stage
	Status     ApprovalStatusEnum `json:"status"`      // status
	Comments   sql.NullString     `json:"comments"`    // comments
	ReviewerID sql.NullInt64      `json:"reviewer_id"` // reviewer_id
	ReviewedAt sql.NullTime       `json:"reviewed_at"` // reviewed_at
	CreatedAt  time.Time          `json:"created_at"`  // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ProductLaunchReview] exists in the database.
func (plr *ProductLaunchReview) Exists() bool {
	return plr._exists
}

// Deleted returns true when the [ProductLaunchReview] has been marked for deletion
// from the database.
func (plr *ProductLaunchReview) Deleted() bool {
	return plr._deleted
}

// Insert inserts the [ProductLaunchReview] to the database.
func (plr *ProductLaunchReview) Insert(ctx context.Context, db DB) error {
	switch {
	case plr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case plr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.product_launch_reviews (` +
		`product_id, stage, status, comments, reviewer_id, reviewed_at, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`
	// run
	logf(sqlstr, plr.ProductID, plr.Stage, plr.Status, plr.Comments, plr.ReviewerID, plr.ReviewedAt, plr.CreatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, plr.ProductID, plr.Stage, plr.Status, plr.Comments, plr.ReviewerID, plr.ReviewedAt, plr.CreatedAt).Scan(&plr.ID); err != nil {
		return logerror(err)
	}
	// set exists
	plr._exists = true
	return nil
}

// Update updates a [ProductLaunchReview] in the database.
func (plr *ProductLaunchReview) Update(ctx context.Context, db DB) error {
	switch {
	case !plr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case plr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.product_launch_reviews SET ` +
		`product_id = $1, stage = $2, status = $3, comments = $4, reviewer_id = $5, reviewed_at = $6, created_at = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, plr.ProductID, plr.Stage, plr.Status, plr.Comments, plr.ReviewerID, plr.ReviewedAt, plr.CreatedAt, plr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, plr.ProductID, plr.Stage, plr.Status, plr.Comments, plr.ReviewerID, plr.ReviewedAt, plr.CreatedAt, plr.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ProductLaunchReview] to the database.
func (plr *ProductLaunchReview) Save(ctx context.Context, db DB) error {
	if plr.Exists() {
		return plr.Update(ctx, db)
	}
	return plr.Insert(ctx, db)
}

// Upsert performs an upsert for [ProductLaunchReview].
func (plr *ProductLaunchReview) Upsert(ctx context.Context, db DB) error {
	switch {
	case plr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.product_launch_reviews (` +
		`id, product_id, stage, status, comments, reviewer_id, reviewed_at, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`product_id = EXCLUDED.product_id, stage = EXCLUDED.stage, status = EXCLUDED.status, comments = EXCLUDED.comments, reviewer_id = EXCLUDED.reviewer_id, reviewed_at = EXCLUDED.reviewed_at, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, plr.ID, plr.ProductID, plr.Stage, plr.Status, plr.Comments, plr.ReviewerID, plr.ReviewedAt, plr.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, plr.ID, plr.ProductID, plr.Stage, plr.Status, plr.Comments, plr.ReviewerID, plr.ReviewedAt, plr.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	plr._exists = true
	return nil
}

// Delete deletes the [ProductLaunchReview] from the database.
func (plr *ProductLaunchReview) Delete(ctx context.Context, db DB) error {
	switch {
	case !plr._exists: // doesn't exist
		return nil
	case plr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.product_launch_reviews ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, plr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, plr.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	plr._deleted = true
	return nil
}

// ProductLaunchReviewsByProductID retrieves a row from 'public.product_launch_reviews' as a [ProductLaunchReview].
//
// Generated from index 'idx_plr_product'.
func ProductLaunchReviewsByProductID(ctx context.Context, db DB, productID int) ([]*ProductLaunchReview, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, product_id, stage, status, comments, reviewer_id, reviewed_at, created_at ` +
		`FROM public.product_launch_reviews ` +
		`WHERE product_id = $1`
	// run
	logf(sqlstr, productID)
	rows, err := db.QueryContext(ctx, sqlstr, productID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ProductLaunchReview
	for rows.Next() {
		plr := ProductLaunchReview{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&plr.ID, &plr.ProductID, &plr.Stage, &plr.Status, &plr.Comments, &plr.ReviewerID, &plr.ReviewedAt, &plr.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &plr)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ProductLaunchReviewByID retrieves a row from 'public.product_launch_reviews' as a [ProductLaunchReview].
//
// Generated from index 'product_launch_reviews_pkey'.
func ProductLaunchReviewByID(ctx context.Context, db DB, id int) (*ProductLaunchReview, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, product_id, stage, status, comments, reviewer_id, reviewed_at, created_at ` +
		`FROM public.product_launch_reviews ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	plr := ProductLaunchReview{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&plr.ID, &plr.ProductID, &plr.Stage, &plr.Status, &plr.Comments, &plr.ReviewerID, &plr.ReviewedAt, &plr.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &plr, nil
}
