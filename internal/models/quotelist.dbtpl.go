package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// QuoteList represents a row from 'public.quote_lists'.
type QuoteList struct {
	ID             int             `json:"id"`               // id
	QuoteRequestID sql.NullInt64   `json:"quote_request_id"` // quote_request_id
	ListDate       sql.NullTime    `json:"list_date"`        // list_date
	TotalAmount    sql.NullFloat64 `json:"total_amount"`     // total_amount
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [QuoteList] exists in the database.
func (ql *QuoteList) Exists() bool {
	return ql._exists
}

// Deleted returns true when the [QuoteList] has been marked for deletion
// from the database.
func (ql *QuoteList) Deleted() bool {
	return ql._deleted
}

// Insert inserts the [QuoteList] to the database.
func (ql *QuoteList) Insert(ctx context.Context, db DB) error {
	switch {
	case ql._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ql._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.quote_lists (` +
		`quote_request_id, list_date, total_amount` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, ql.QuoteRequestID, ql.ListDate, ql.TotalAmount)
	if err := db.QueryRowContext(ctx, sqlstr, ql.QuoteRequestID, ql.ListDate, ql.TotalAmount).Scan(&ql.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ql._exists = true
	return nil
}

// Update updates a [QuoteList] in the database.
func (ql *QuoteList) Update(ctx context.Context, db DB) error {
	switch {
	case !ql._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ql._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.quote_lists SET ` +
		`quote_request_id = $1, list_date = $2, total_amount = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, ql.QuoteRequestID, ql.ListDate, ql.TotalAmount, ql.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ql.QuoteRequestID, ql.ListDate, ql.TotalAmount, ql.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [QuoteList] to the database.
func (ql *QuoteList) Save(ctx context.Context, db DB) error {
	if ql.Exists() {
		return ql.Update(ctx, db)
	}
	return ql.Insert(ctx, db)
}

// Upsert performs an upsert for [QuoteList].
func (ql *QuoteList) Upsert(ctx context.Context, db DB) error {
	switch {
	case ql._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.quote_lists (` +
		`id, quote_request_id, list_date, total_amount` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`quote_request_id = EXCLUDED.quote_request_id, list_date = EXCLUDED.list_date, total_amount = EXCLUDED.total_amount `
	// run
	logf(sqlstr, ql.ID, ql.QuoteRequestID, ql.ListDate, ql.TotalAmount)
	if _, err := db.ExecContext(ctx, sqlstr, ql.ID, ql.QuoteRequestID, ql.ListDate, ql.TotalAmount); err != nil {
		return logerror(err)
	}
	// set exists
	ql._exists = true
	return nil
}

// Delete deletes the [QuoteList] from the database.
func (ql *QuoteList) Delete(ctx context.Context, db DB) error {
	switch {
	case !ql._exists: // doesn't exist
		return nil
	case ql._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.quote_lists ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ql.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ql.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ql._deleted = true
	return nil
}

// QuoteListByID retrieves a row from 'public.quote_lists' as a [QuoteList].
//
// Generated from index 'quote_lists_pkey'.
func QuoteListByID(ctx context.Context, db DB, id int) (*QuoteList, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, quote_request_id, list_date, total_amount ` +
		`FROM public.quote_lists ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ql := QuoteList{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ql.ID, &ql.QuoteRequestID, &ql.ListDate, &ql.TotalAmount); err != nil {
		return nil, logerror(err)
	}
	return &ql, nil
}
