package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// QuoteRequest represents a row from 'public.quote_requests'.
type QuoteRequest struct {
	ID          int             `json:"id"`           // id
	StoreID     sql.NullInt64   `json:"store_id"`     // store_id
	QuoteDate   time.Time       `json:"quote_date"`   // quote_date
	TotalAmount sql.NullFloat64 `json:"total_amount"` // total_amount
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [QuoteRequest] exists in the database.
func (qr *QuoteRequest) Exists() bool {
	return qr._exists
}

// Deleted returns true when the [QuoteRequest] has been marked for deletion
// from the database.
func (qr *QuoteRequest) Deleted() bool {
	return qr._deleted
}

// Insert inserts the [QuoteRequest] to the database.
func (qr *QuoteRequest) Insert(ctx context.Context, db DB) error {
	switch {
	case qr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case qr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.quote_requests (` +
		`store_id, quote_date, total_amount` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, qr.StoreID, qr.QuoteDate, qr.TotalAmount)
	if err := db.QueryRowContext(ctx, sqlstr, qr.StoreID, qr.QuoteDate, qr.TotalAmount).Scan(&qr.ID); err != nil {
		return logerror(err)
	}
	// set exists
	qr._exists = true
	return nil
}

// Update updates a [QuoteRequest] in the database.
func (qr *QuoteRequest) Update(ctx context.Context, db DB) error {
	switch {
	case !qr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case qr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.quote_requests SET ` +
		`store_id = $1, quote_date = $2, total_amount = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, qr.StoreID, qr.QuoteDate, qr.TotalAmount, qr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, qr.StoreID, qr.QuoteDate, qr.TotalAmount, qr.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [QuoteRequest] to the database.
func (qr *QuoteRequest) Save(ctx context.Context, db DB) error {
	if qr.Exists() {
		return qr.Update(ctx, db)
	}
	return qr.Insert(ctx, db)
}

// Upsert performs an upsert for [QuoteRequest].
func (qr *QuoteRequest) Upsert(ctx context.Context, db DB) error {
	switch {
	case qr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.quote_requests (` +
		`id, store_id, quote_date, total_amount` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`store_id = EXCLUDED.store_id, quote_date = EXCLUDED.quote_date, total_amount = EXCLUDED.total_amount `
	// run
	logf(sqlstr, qr.ID, qr.StoreID, qr.QuoteDate, qr.TotalAmount)
	if _, err := db.ExecContext(ctx, sqlstr, qr.ID, qr.StoreID, qr.QuoteDate, qr.TotalAmount); err != nil {
		return logerror(err)
	}
	// set exists
	qr._exists = true
	return nil
}

// Delete deletes the [QuoteRequest] from the database.
func (qr *QuoteRequest) Delete(ctx context.Context, db DB) error {
	switch {
	case !qr._exists: // doesn't exist
		return nil
	case qr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.quote_requests ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, qr.ID)
	if _, err := db.ExecContext(ctx, sqlstr, qr.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	qr._deleted = true
	return nil
}

// QuoteRequestByID retrieves a row from 'public.quote_requests' as a [QuoteRequest].
//
// Generated from index 'quote_requests_pkey'.
func QuoteRequestByID(ctx context.Context, db DB, id int) (*QuoteRequest, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, store_id, quote_date, total_amount ` +
		`FROM public.quote_requests ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	qr := QuoteRequest{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&qr.ID, &qr.StoreID, &qr.QuoteDate, &qr.TotalAmount); err != nil {
		return nil, logerror(err)
	}
	return &qr, nil
}
