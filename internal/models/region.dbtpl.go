package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// Region represents a row from 'public.regions'.
type Region struct {
	ID        int       `json:"id"`         // id
	Name      string    `json:"name"`       // name
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Region] exists in the database.
func (r *Region) Exists() bool {
	return r._exists
}

// Deleted returns true when the [Region] has been marked for deletion
// from the database.
func (r *Region) Deleted() bool {
	return r._deleted
}

// Insert inserts the [Region] to the database.
func (r *Region) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.regions (` +
		`name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, r.Name, r.CreatedAt, r.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, r.Name, r.CreatedAt, r.UpdatedAt).Scan(&r.ID); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Update updates a [Region] in the database.
func (r *Region) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.regions SET ` +
		`name = $1, created_at = $2, updated_at = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, r.Name, r.CreatedAt, r.UpdatedAt, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.Name, r.CreatedAt, r.UpdatedAt, r.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Region] to the database.
func (r *Region) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for [Region].
func (r *Region) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.regions (` +
		`id, name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, r.ID, r.Name, r.CreatedAt, r.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID, r.Name, r.CreatedAt, r.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the [Region] from the database.
func (r *Region) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.regions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// RegionByName retrieves a row from 'public.regions' as a [Region].
//
// Generated from index 'regions_name_key'.
func RegionByName(ctx context.Context, db DB, name string) (*Region, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, created_at, updated_at ` +
		`FROM public.regions ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	r := Region{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&r.ID, &r.Name, &r.CreatedAt, &r.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}

// RegionByID retrieves a row from 'public.regions' as a [Region].
//
// Generated from index 'regions_pkey'.
func RegionByID(ctx context.Context, db DB, id int) (*Region, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, created_at, updated_at ` +
		`FROM public.regions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	r := Region{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&r.ID, &r.Name, &r.CreatedAt, &r.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}
