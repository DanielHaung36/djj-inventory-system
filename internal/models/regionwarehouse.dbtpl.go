package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
)

// RegionWarehouse represents a row from 'public.region_warehouses'.
type RegionWarehouse struct {
	RegionID    int `json:"region_id"`    // region_id
	WarehouseID int `json:"warehouse_id"` // warehouse_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [RegionWarehouse] exists in the database.
func (rw *RegionWarehouse) Exists() bool {
	return rw._exists
}

// Deleted returns true when the [RegionWarehouse] has been marked for deletion
// from the database.
func (rw *RegionWarehouse) Deleted() bool {
	return rw._deleted
}

// Insert inserts the [RegionWarehouse] to the database.
func (rw *RegionWarehouse) Insert(ctx context.Context, db DB) error {
	switch {
	case rw._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case rw._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.region_warehouses (` +
		`region_id, warehouse_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, rw.RegionID, rw.WarehouseID)
	if _, err := db.ExecContext(ctx, sqlstr, rw.RegionID, rw.WarehouseID); err != nil {
		return logerror(err)
	}
	// set exists
	rw._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [RegionWarehouse] from the database.
func (rw *RegionWarehouse) Delete(ctx context.Context, db DB) error {
	switch {
	case !rw._exists: // doesn't exist
		return nil
	case rw._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.region_warehouses ` +
		`WHERE region_id = $1 AND warehouse_id = $2`
	// run
	logf(sqlstr, rw.RegionID, rw.WarehouseID)
	if _, err := db.ExecContext(ctx, sqlstr, rw.RegionID, rw.WarehouseID); err != nil {
		return logerror(err)
	}
	// set deleted
	rw._deleted = true
	return nil
}

// RegionWarehousesByRegionID retrieves a row from 'public.region_warehouses' as a [RegionWarehouse].
//
// Generated from index 'idx_region_wh_region'.
func RegionWarehousesByRegionID(ctx context.Context, db DB, regionID int) ([]*RegionWarehouse, error) {
	// query
	const sqlstr = `SELECT ` +
		`region_id, warehouse_id ` +
		`FROM public.region_warehouses ` +
		`WHERE region_id = $1`
	// run
	logf(sqlstr, regionID)
	rows, err := db.QueryContext(ctx, sqlstr, regionID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*RegionWarehouse
	for rows.Next() {
		rw := RegionWarehouse{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rw.RegionID, &rw.WarehouseID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rw)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RegionWarehousesByWarehouseID retrieves a row from 'public.region_warehouses' as a [RegionWarehouse].
//
// Generated from index 'idx_region_wh_warehouse'.
func RegionWarehousesByWarehouseID(ctx context.Context, db DB, warehouseID int) ([]*RegionWarehouse, error) {
	// query
	const sqlstr = `SELECT ` +
		`region_id, warehouse_id ` +
		`FROM public.region_warehouses ` +
		`WHERE warehouse_id = $1`
	// run
	logf(sqlstr, warehouseID)
	rows, err := db.QueryContext(ctx, sqlstr, warehouseID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*RegionWarehouse
	for rows.Next() {
		rw := RegionWarehouse{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rw.RegionID, &rw.WarehouseID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rw)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RegionWarehouseByRegionIDWarehouseID retrieves a row from 'public.region_warehouses' as a [RegionWarehouse].
//
// Generated from index 'region_warehouses_pkey'.
func RegionWarehouseByRegionIDWarehouseID(ctx context.Context, db DB, regionID, warehouseID int) (*RegionWarehouse, error) {
	// query
	const sqlstr = `SELECT ` +
		`region_id, warehouse_id ` +
		`FROM public.region_warehouses ` +
		`WHERE region_id = $1 AND warehouse_id = $2`
	// run
	logf(sqlstr, regionID, warehouseID)
	rw := RegionWarehouse{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, regionID, warehouseID).Scan(&rw.RegionID, &rw.WarehouseID); err != nil {
		return nil, logerror(err)
	}
	return &rw, nil
}
