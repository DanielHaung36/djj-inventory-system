package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Reminder represents a row from 'public.reminders'.
type Reminder struct {
	ID       int            `json:"id"`        // id
	RefType  sql.NullString `json:"ref_type"`  // ref_type
	RefID    sql.NullInt64  `json:"ref_id"`    // ref_id
	RemindAt time.Time      `json:"remind_at"` // remind_at
	Message  sql.NullString `json:"message"`   // message
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Reminder] exists in the database.
func (r *Reminder) Exists() bool {
	return r._exists
}

// Deleted returns true when the [Reminder] has been marked for deletion
// from the database.
func (r *Reminder) Deleted() bool {
	return r._deleted
}

// Insert inserts the [Reminder] to the database.
func (r *Reminder) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.reminders (` +
		`ref_type, ref_id, remind_at, message` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, r.RefType, r.RefID, r.RemindAt, r.Message)
	if err := db.QueryRowContext(ctx, sqlstr, r.RefType, r.RefID, r.RemindAt, r.Message).Scan(&r.ID); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Update updates a [Reminder] in the database.
func (r *Reminder) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.reminders SET ` +
		`ref_type = $1, ref_id = $2, remind_at = $3, message = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, r.RefType, r.RefID, r.RemindAt, r.Message, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.RefType, r.RefID, r.RemindAt, r.Message, r.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Reminder] to the database.
func (r *Reminder) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for [Reminder].
func (r *Reminder) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.reminders (` +
		`id, ref_type, ref_id, remind_at, message` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`ref_type = EXCLUDED.ref_type, ref_id = EXCLUDED.ref_id, remind_at = EXCLUDED.remind_at, message = EXCLUDED.message `
	// run
	logf(sqlstr, r.ID, r.RefType, r.RefID, r.RemindAt, r.Message)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID, r.RefType, r.RefID, r.RemindAt, r.Message); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the [Reminder] from the database.
func (r *Reminder) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.reminders ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// ReminderByID retrieves a row from 'public.reminders' as a [Reminder].
//
// Generated from index 'reminders_pkey'.
func ReminderByID(ctx context.Context, db DB, id int) (*Reminder, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, ref_type, ref_id, remind_at, message ` +
		`FROM public.reminders ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	r := Reminder{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&r.ID, &r.RefType, &r.RefID, &r.RemindAt, &r.Message); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}
