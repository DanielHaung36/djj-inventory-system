package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// ReviewStageEnum is the 'review_stage_enum' enum type from schema 'public'.
type ReviewStageEnum uint16

// ReviewStageEnum values.
const (
	// ReviewStageEnumTechnical is the 'technical' review_stage_enum.
	ReviewStageEnumTechnical ReviewStageEnum = 1
	// ReviewStageEnumPurchasing is the 'purchasing' review_stage_enum.
	ReviewStageEnumPurchasing ReviewStageEnum = 2
	// ReviewStageEnumFinance is the 'finance' review_stage_enum.
	ReviewStageEnumFinance ReviewStageEnum = 3
)

// String satisfies the [fmt.Stringer] interface.
func (rse ReviewStageEnum) String() string {
	switch rse {
	case ReviewStageEnumTechnical:
		return "technical"
	case ReviewStageEnumPurchasing:
		return "purchasing"
	case ReviewStageEnumFinance:
		return "finance"
	}
	return fmt.Sprintf("ReviewStageEnum(%d)", rse)
}

// MarshalText marshals [ReviewStageEnum] into text.
func (rse ReviewStageEnum) MarshalText() ([]byte, error) {
	return []byte(rse.String()), nil
}

// UnmarshalText unmarshals [ReviewStageEnum] from text.
func (rse *ReviewStageEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "technical":
		*rse = ReviewStageEnumTechnical
	case "purchasing":
		*rse = ReviewStageEnumPurchasing
	case "finance":
		*rse = ReviewStageEnumFinance
	default:
		return ErrInvalidReviewStageEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (rse ReviewStageEnum) Value() (driver.Value, error) {
	return rse.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (rse *ReviewStageEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return rse.UnmarshalText(x)
	case string:
		return rse.UnmarshalText([]byte(x))
	}
	return ErrInvalidReviewStageEnum(fmt.Sprintf("%T", v))
}

// NullReviewStageEnum represents a null 'review_stage_enum' enum for schema 'public'.
type NullReviewStageEnum struct {
	ReviewStageEnum ReviewStageEnum
	// Valid is true if [ReviewStageEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nrse NullReviewStageEnum) Value() (driver.Value, error) {
	if !nrse.Valid {
		return nil, nil
	}
	return nrse.ReviewStageEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nrse *NullReviewStageEnum) Scan(v any) error {
	if v == nil {
		nrse.ReviewStageEnum, nrse.Valid = 0, false
		return nil
	}
	err := nrse.ReviewStageEnum.Scan(v)
	nrse.Valid = err == nil
	return err
}

// ErrInvalidReviewStageEnum is the invalid [ReviewStageEnum] error.
type ErrInvalidReviewStageEnum string

// Error satisfies the error interface.
func (err ErrInvalidReviewStageEnum) Error() string {
	return fmt.Sprintf("invalid ReviewStageEnum(%s)", string(err))
}
