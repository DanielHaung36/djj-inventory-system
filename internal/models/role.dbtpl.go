package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
)

// Role represents a row from 'public.roles'.
type Role struct {
	ID   int    `json:"id"`   // id
	Name string `json:"name"` // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Role] exists in the database.
func (r *Role) Exists() bool {
	return r._exists
}

// Deleted returns true when the [Role] has been marked for deletion
// from the database.
func (r *Role) Deleted() bool {
	return r._deleted
}

// Insert inserts the [Role] to the database.
func (r *Role) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.roles (` +
		`name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, r.Name)
	if err := db.QueryRowContext(ctx, sqlstr, r.Name).Scan(&r.ID); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Update updates a [Role] in the database.
func (r *Role) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.roles SET ` +
		`name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, r.Name, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.Name, r.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Role] to the database.
func (r *Role) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for [Role].
func (r *Role) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.roles (` +
		`id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, r.ID, r.Name)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID, r.Name); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the [Role] from the database.
func (r *Role) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.roles ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// RoleByName retrieves a row from 'public.roles' as a [Role].
//
// Generated from index 'roles_name_key'.
func RoleByName(ctx context.Context, db DB, name string) (*Role, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.roles ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	r := Role{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&r.ID, &r.Name); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}

// RoleByID retrieves a row from 'public.roles' as a [Role].
//
// Generated from index 'roles_pkey'.
func RoleByID(ctx context.Context, db DB, id int) (*Role, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM public.roles ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	r := Role{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&r.ID, &r.Name); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}
