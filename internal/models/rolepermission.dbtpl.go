package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
)

// RolePermission represents a row from 'public.role_permissions'.
type RolePermission struct {
	RoleID       int `json:"role_id"`       // role_id
	PermissionID int `json:"permission_id"` // permission_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [RolePermission] exists in the database.
func (rp *RolePermission) Exists() bool {
	return rp._exists
}

// Deleted returns true when the [RolePermission] has been marked for deletion
// from the database.
func (rp *RolePermission) Deleted() bool {
	return rp._deleted
}

// Insert inserts the [RolePermission] to the database.
func (rp *RolePermission) Insert(ctx context.Context, db DB) error {
	switch {
	case rp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case rp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.role_permissions (` +
		`role_id, permission_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, rp.RoleID, rp.PermissionID)
	if _, err := db.ExecContext(ctx, sqlstr, rp.RoleID, rp.PermissionID); err != nil {
		return logerror(err)
	}
	// set exists
	rp._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [RolePermission] from the database.
func (rp *RolePermission) Delete(ctx context.Context, db DB) error {
	switch {
	case !rp._exists: // doesn't exist
		return nil
	case rp._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.role_permissions ` +
		`WHERE role_id = $1 AND permission_id = $2`
	// run
	logf(sqlstr, rp.RoleID, rp.PermissionID)
	if _, err := db.ExecContext(ctx, sqlstr, rp.RoleID, rp.PermissionID); err != nil {
		return logerror(err)
	}
	// set deleted
	rp._deleted = true
	return nil
}

// RolePermissionByRoleIDPermissionID retrieves a row from 'public.role_permissions' as a [RolePermission].
//
// Generated from index 'role_permissions_pkey'.
func RolePermissionByRoleIDPermissionID(ctx context.Context, db DB, roleID, permissionID int) (*RolePermission, error) {
	// query
	const sqlstr = `SELECT ` +
		`role_id, permission_id ` +
		`FROM public.role_permissions ` +
		`WHERE role_id = $1 AND permission_id = $2`
	// run
	logf(sqlstr, roleID, permissionID)
	rp := RolePermission{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, roleID, permissionID).Scan(&rp.RoleID, &rp.PermissionID); err != nil {
		return nil, logerror(err)
	}
	return &rp, nil
}
