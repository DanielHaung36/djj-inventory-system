package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// StockStatusEnum is the 'stock_status_enum' enum type from schema 'public'.
type StockStatusEnum uint16

// StockStatusEnum values.
const (
	// StockStatusEnumPending is the 'pending' stock_status_enum.
	StockStatusEnumPending StockStatusEnum = 1
	// StockStatusEnumInStock is the 'in_stock' stock_status_enum.
	StockStatusEnumInStock StockStatusEnum = 2
	// StockStatusEnumNotApplicable is the 'not_applicable' stock_status_enum.
	StockStatusEnumNotApplicable StockStatusEnum = 3
)

// String satisfies the [fmt.Stringer] interface.
func (sse StockStatusEnum) String() string {
	switch sse {
	case StockStatusEnumPending:
		return "pending"
	case StockStatusEnumInStock:
		return "in_stock"
	case StockStatusEnumNotApplicable:
		return "not_applicable"
	}
	return fmt.Sprintf("StockStatusEnum(%d)", sse)
}

// MarshalText marshals [StockStatusEnum] into text.
func (sse StockStatusEnum) MarshalText() ([]byte, error) {
	return []byte(sse.String()), nil
}

// UnmarshalText unmarshals [StockStatusEnum] from text.
func (sse *StockStatusEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "pending":
		*sse = StockStatusEnumPending
	case "in_stock":
		*sse = StockStatusEnumInStock
	case "not_applicable":
		*sse = StockStatusEnumNotApplicable
	default:
		return ErrInvalidStockStatusEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (sse StockStatusEnum) Value() (driver.Value, error) {
	return sse.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (sse *StockStatusEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return sse.UnmarshalText(x)
	case string:
		return sse.UnmarshalText([]byte(x))
	}
	return ErrInvalidStockStatusEnum(fmt.Sprintf("%T", v))
}

// NullStockStatusEnum represents a null 'stock_status_enum' enum for schema 'public'.
type NullStockStatusEnum struct {
	StockStatusEnum StockStatusEnum
	// Valid is true if [StockStatusEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nsse NullStockStatusEnum) Value() (driver.Value, error) {
	if !nsse.Valid {
		return nil, nil
	}
	return nsse.StockStatusEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nsse *NullStockStatusEnum) Scan(v any) error {
	if v == nil {
		nsse.StockStatusEnum, nsse.Valid = 0, false
		return nil
	}
	err := nsse.StockStatusEnum.Scan(v)
	nsse.Valid = err == nil
	return err
}

// ErrInvalidStockStatusEnum is the invalid [StockStatusEnum] error.
type ErrInvalidStockStatusEnum string

// Error satisfies the error interface.
func (err ErrInvalidStockStatusEnum) Error() string {
	return fmt.Sprintf("invalid StockStatusEnum(%s)", string(err))
}
