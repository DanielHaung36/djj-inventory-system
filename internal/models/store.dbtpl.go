package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Store represents a row from 'public.stores'.
type Store struct {
	ID        int            `json:"id"`         // id
	Code      string         `json:"code"`       // code
	Name      string         `json:"name"`       // name
	RegionID  int            `json:"region_id"`  // region_id
	Address   sql.NullString `json:"address"`    // address
	ManagerID sql.NullInt64  `json:"manager_id"` // manager_id
	Version   int64          `json:"version"`    // version
	CreatedAt time.Time      `json:"created_at"` // created_at
	UpdatedAt time.Time      `json:"updated_at"` // updated_at
	IsDeleted bool           `json:"is_deleted"` // is_deleted
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Store] exists in the database.
func (s *Store) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Store] has been marked for deletion
// from the database.
func (s *Store) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Store] to the database.
func (s *Store) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.stores (` +
		`code, name, region_id, address, manager_id, version, created_at, updated_at, is_deleted` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`
	// run
	logf(sqlstr, s.Code, s.Name, s.RegionID, s.Address, s.ManagerID, s.Version, s.CreatedAt, s.UpdatedAt, s.IsDeleted)
	if err := db.QueryRowContext(ctx, sqlstr, s.Code, s.Name, s.RegionID, s.Address, s.ManagerID, s.Version, s.CreatedAt, s.UpdatedAt, s.IsDeleted).Scan(&s.ID); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Store] in the database.
func (s *Store) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.stores SET ` +
		`code = $1, name = $2, region_id = $3, address = $4, manager_id = $5, version = $6, created_at = $7, updated_at = $8, is_deleted = $9 ` +
		`WHERE id = $10`
	// run
	logf(sqlstr, s.Code, s.Name, s.RegionID, s.Address, s.ManagerID, s.Version, s.CreatedAt, s.UpdatedAt, s.IsDeleted, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.Code, s.Name, s.RegionID, s.Address, s.ManagerID, s.Version, s.CreatedAt, s.UpdatedAt, s.IsDeleted, s.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Store] to the database.
func (s *Store) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Store].
func (s *Store) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.stores (` +
		`id, code, name, region_id, address, manager_id, version, created_at, updated_at, is_deleted` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`code = EXCLUDED.code, name = EXCLUDED.name, region_id = EXCLUDED.region_id, address = EXCLUDED.address, manager_id = EXCLUDED.manager_id, version = EXCLUDED.version, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, is_deleted = EXCLUDED.is_deleted `
	// run
	logf(sqlstr, s.ID, s.Code, s.Name, s.RegionID, s.Address, s.ManagerID, s.Version, s.CreatedAt, s.UpdatedAt, s.IsDeleted)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.Code, s.Name, s.RegionID, s.Address, s.ManagerID, s.Version, s.CreatedAt, s.UpdatedAt, s.IsDeleted); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Store] from the database.
func (s *Store) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.stores ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// StoresByManagerID retrieves a row from 'public.stores' as a [Store].
//
// Generated from index 'idx_stores_manager'.
func StoresByManagerID(ctx context.Context, db DB, managerID sql.NullInt64) ([]*Store, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, region_id, address, manager_id, version, created_at, updated_at, is_deleted ` +
		`FROM public.stores ` +
		`WHERE manager_id = $1`
	// run
	logf(sqlstr, managerID)
	rows, err := db.QueryContext(ctx, sqlstr, managerID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Store
	for rows.Next() {
		s := Store{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&s.ID, &s.Code, &s.Name, &s.RegionID, &s.Address, &s.ManagerID, &s.Version, &s.CreatedAt, &s.UpdatedAt, &s.IsDeleted); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// StoresByRegionID retrieves a row from 'public.stores' as a [Store].
//
// Generated from index 'idx_stores_region'.
func StoresByRegionID(ctx context.Context, db DB, regionID int) ([]*Store, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, region_id, address, manager_id, version, created_at, updated_at, is_deleted ` +
		`FROM public.stores ` +
		`WHERE region_id = $1`
	// run
	logf(sqlstr, regionID)
	rows, err := db.QueryContext(ctx, sqlstr, regionID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Store
	for rows.Next() {
		s := Store{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&s.ID, &s.Code, &s.Name, &s.RegionID, &s.Address, &s.ManagerID, &s.Version, &s.CreatedAt, &s.UpdatedAt, &s.IsDeleted); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// StoreByCode retrieves a row from 'public.stores' as a [Store].
//
// Generated from index 'stores_code_key'.
func StoreByCode(ctx context.Context, db DB, code string) (*Store, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, region_id, address, manager_id, version, created_at, updated_at, is_deleted ` +
		`FROM public.stores ` +
		`WHERE code = $1`
	// run
	logf(sqlstr, code)
	s := Store{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, code).Scan(&s.ID, &s.Code, &s.Name, &s.RegionID, &s.Address, &s.ManagerID, &s.Version, &s.CreatedAt, &s.UpdatedAt, &s.IsDeleted); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// StoreByID retrieves a row from 'public.stores' as a [Store].
//
// Generated from index 'stores_pkey'.
func StoreByID(ctx context.Context, db DB, id int) (*Store, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, name, region_id, address, manager_id, version, created_at, updated_at, is_deleted ` +
		`FROM public.stores ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	s := Store{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&s.ID, &s.Code, &s.Name, &s.RegionID, &s.Address, &s.ManagerID, &s.Version, &s.CreatedAt, &s.UpdatedAt, &s.IsDeleted); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
