package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// User represents a row from 'public.users'.
type User struct {
	ID           int       `json:"id"`            // id
	Username     string    `json:"username"`      // username
	PasswordHash string    `json:"password_hash"` // password_hash
	Version      int64     `json:"version"`       // version
	CreatedAt    time.Time `json:"created_at"`    // created_at
	UpdatedAt    time.Time `json:"updated_at"`    // updated_at
	IsDeleted    bool      `json:"is_deleted"`    // is_deleted
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [User] exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the [User] has been marked for deletion
// from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the [User] to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.users (` +
		`username, password_hash, version, created_at, updated_at, is_deleted` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, u.Username, u.PasswordHash, u.Version, u.CreatedAt, u.UpdatedAt, u.IsDeleted)
	if err := db.QueryRowContext(ctx, sqlstr, u.Username, u.PasswordHash, u.Version, u.CreatedAt, u.UpdatedAt, u.IsDeleted).Scan(&u.ID); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a [User] in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.users SET ` +
		`username = $1, password_hash = $2, version = $3, created_at = $4, updated_at = $5, is_deleted = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, u.Username, u.PasswordHash, u.Version, u.CreatedAt, u.UpdatedAt, u.IsDeleted, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.Username, u.PasswordHash, u.Version, u.CreatedAt, u.UpdatedAt, u.IsDeleted, u.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [User] to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for [User].
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.users (` +
		`id, username, password_hash, version, created_at, updated_at, is_deleted` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`username = EXCLUDED.username, password_hash = EXCLUDED.password_hash, version = EXCLUDED.version, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, is_deleted = EXCLUDED.is_deleted `
	// run
	logf(sqlstr, u.ID, u.Username, u.PasswordHash, u.Version, u.CreatedAt, u.UpdatedAt, u.IsDeleted)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID, u.Username, u.PasswordHash, u.Version, u.CreatedAt, u.UpdatedAt, u.IsDeleted); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the [User] from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.users ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByID retrieves a row from 'public.users' as a [User].
//
// Generated from index 'users_pkey'.
func UserByID(ctx context.Context, db DB, id int) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, password_hash, version, created_at, updated_at, is_deleted ` +
		`FROM public.users ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&u.ID, &u.Username, &u.PasswordHash, &u.Version, &u.CreatedAt, &u.UpdatedAt, &u.IsDeleted); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UserByUsername retrieves a row from 'public.users' as a [User].
//
// Generated from index 'users_username_key'.
func UserByUsername(ctx context.Context, db DB, username string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, password_hash, version, created_at, updated_at, is_deleted ` +
		`FROM public.users ` +
		`WHERE username = $1`
	// run
	logf(sqlstr, username)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, username).Scan(&u.ID, &u.Username, &u.PasswordHash, &u.Version, &u.CreatedAt, &u.UpdatedAt, &u.IsDeleted); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
