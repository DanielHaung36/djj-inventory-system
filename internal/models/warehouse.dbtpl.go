package models

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Warehouse represents a row from 'public.warehouses'.
type Warehouse struct {
	ID        int            `json:"id"`         // id
	Name      string         `json:"name"`       // name
	Location  sql.NullString `json:"location"`   // location
	Version   int64          `json:"version"`    // version
	CreatedAt time.Time      `json:"created_at"` // created_at
	UpdatedAt time.Time      `json:"updated_at"` // updated_at
	IsDeleted bool           `json:"is_deleted"` // is_deleted
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Warehouse] exists in the database.
func (w *Warehouse) Exists() bool {
	return w._exists
}

// Deleted returns true when the [Warehouse] has been marked for deletion
// from the database.
func (w *Warehouse) Deleted() bool {
	return w._deleted
}

// Insert inserts the [Warehouse] to the database.
func (w *Warehouse) Insert(ctx context.Context, db DB) error {
	switch {
	case w._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case w._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.warehouses (` +
		`name, location, version, created_at, updated_at, is_deleted` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`
	// run
	logf(sqlstr, w.Name, w.Location, w.Version, w.CreatedAt, w.UpdatedAt, w.IsDeleted)
	if err := db.QueryRowContext(ctx, sqlstr, w.Name, w.Location, w.Version, w.CreatedAt, w.UpdatedAt, w.IsDeleted).Scan(&w.ID); err != nil {
		return logerror(err)
	}
	// set exists
	w._exists = true
	return nil
}

// Update updates a [Warehouse] in the database.
func (w *Warehouse) Update(ctx context.Context, db DB) error {
	switch {
	case !w._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case w._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.warehouses SET ` +
		`name = $1, location = $2, version = $3, created_at = $4, updated_at = $5, is_deleted = $6 ` +
		`WHERE id = $7`
	// run
	logf(sqlstr, w.Name, w.Location, w.Version, w.CreatedAt, w.UpdatedAt, w.IsDeleted, w.ID)
	if _, err := db.ExecContext(ctx, sqlstr, w.Name, w.Location, w.Version, w.CreatedAt, w.UpdatedAt, w.IsDeleted, w.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Warehouse] to the database.
func (w *Warehouse) Save(ctx context.Context, db DB) error {
	if w.Exists() {
		return w.Update(ctx, db)
	}
	return w.Insert(ctx, db)
}

// Upsert performs an upsert for [Warehouse].
func (w *Warehouse) Upsert(ctx context.Context, db DB) error {
	switch {
	case w._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.warehouses (` +
		`id, name, location, version, created_at, updated_at, is_deleted` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, location = EXCLUDED.location, version = EXCLUDED.version, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, is_deleted = EXCLUDED.is_deleted `
	// run
	logf(sqlstr, w.ID, w.Name, w.Location, w.Version, w.CreatedAt, w.UpdatedAt, w.IsDeleted)
	if _, err := db.ExecContext(ctx, sqlstr, w.ID, w.Name, w.Location, w.Version, w.CreatedAt, w.UpdatedAt, w.IsDeleted); err != nil {
		return logerror(err)
	}
	// set exists
	w._exists = true
	return nil
}

// Delete deletes the [Warehouse] from the database.
func (w *Warehouse) Delete(ctx context.Context, db DB) error {
	switch {
	case !w._exists: // doesn't exist
		return nil
	case w._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.warehouses ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, w.ID)
	if _, err := db.ExecContext(ctx, sqlstr, w.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	w._deleted = true
	return nil
}

// WarehouseByName retrieves a row from 'public.warehouses' as a [Warehouse].
//
// Generated from index 'warehouses_name_key'.
func WarehouseByName(ctx context.Context, db DB, name string) (*Warehouse, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, location, version, created_at, updated_at, is_deleted ` +
		`FROM public.warehouses ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	w := Warehouse{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&w.ID, &w.Name, &w.Location, &w.Version, &w.CreatedAt, &w.UpdatedAt, &w.IsDeleted); err != nil {
		return nil, logerror(err)
	}
	return &w, nil
}

// WarehouseByID retrieves a row from 'public.warehouses' as a [Warehouse].
//
// Generated from index 'warehouses_pkey'.
func WarehouseByID(ctx context.Context, db DB, id int) (*Warehouse, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, location, version, created_at, updated_at, is_deleted ` +
		`FROM public.warehouses ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	w := Warehouse{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&w.ID, &w.Name, &w.Location, &w.Version, &w.CreatedAt, &w.UpdatedAt, &w.IsDeleted); err != nil {
		return nil, logerror(err)
	}
	return &w, nil
}
